{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory 이름",
			"defaultValue": "CDI-Hub-ADF-p01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_MKTLINK_PG')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "매출(주문)/외부/유통사MS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_MKTLINK",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {카테고리} as string,",
						"          {월별} as string,",
						"          {분기} as string,",
						"          {년도} as string,",
						"          {채널} as string,",
						"          {지역} as string,",
						"          {영업조직} as string,",
						"          ONOFF as string,",
						"          ITEM_DESC as string,",
						"          BARCODE as string,",
						"          MANUFACTURER as string,",
						"          BRAND as string,",
						"          SUB_BRAND as string,",
						"          ATTR01 as string,",
						"          ATTR02 as string,",
						"          ATTR03 as string,",
						"          ATTR04 as string,",
						"          ATTR05 as string,",
						"          ATTR06 as string,",
						"          ATTR07 as string,",
						"          {판매금액} as string,",
						"          {판매물량} as string,",
						"          {판매수량} as string,",
						"          ND as string,",
						"          WD as string,",
						"          {신제품 출시 년월} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['매출(주문)/외부/유통사MS정보/마켓링크/유통사 MS 데이터_마켓링크_20????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          category = {카테고리},",
						"          month = {월별},",
						"          qter = {분기},",
						"          year = {년도},",
						"          ch = {채널},",
						"          region = {지역},",
						"          salesorg = {영업조직},",
						"          onoff = ONOFF,",
						"          item_desc = ITEM_DESC,",
						"          barcode = BARCODE,",
						"          manufacturer = MANUFACTURER,",
						"          brand = BRAND,",
						"          sub_brand = SUB_BRAND,",
						"          attr01 = ATTR01,",
						"          attr02 = ATTR02,",
						"          attr03 = ATTR03,",
						"          attr04 = ATTR04,",
						"          attr05 = ATTR05,",
						"          sales_amt = {판매금액},",
						"          sales_qtm = {판매물량},",
						"          sales_qty = {판매수량},",
						"          nd = ND,",
						"          wd = WD,",
						"          newproduct_date = {신제품 출시 년월},",
						"          attr06 = ATTR06,",
						"          attr07 = ATTR07",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(yyyymm = replace(substring(toString(currentDate()),1,7),'-',''),",
						"          crt_date = currentDate(),",
						"          newproduct_yyyymm = replace(replace(newproduct_date,'년 ',''),'월','')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          category,",
						"          month,",
						"          qter,",
						"          year,",
						"          ch,",
						"          region,",
						"          salesorg,",
						"          onoff,",
						"          item_desc,",
						"          barcode,",
						"          manufacturer,",
						"          brand,",
						"          sub_brand,",
						"          attr01,",
						"          attr02,",
						"          attr03,",
						"          attr04,",
						"          attr05,",
						"          sales_amt,",
						"          sales_qtm,",
						"          sales_qty,",
						"          nd,",
						"          wd,",
						"          newproduct_date,",
						"          yyyymm,",
						"          crt_date,",
						"          newproduct_yyyymm,",
						"          attr06,",
						"          attr07",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_MKTLINK_PG_NEW')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "매출(주문)/외부/유통사MS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_MKTLINK",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {카테고리} as string,",
						"          {월별} as string,",
						"          {분기} as string,",
						"          {년도} as string,",
						"          {채널} as string,",
						"          {지역} as string,",
						"          {영업조직} as string,",
						"          ONOFF as string,",
						"          ITEM_DESC as string,",
						"          BARCODE as string,",
						"          MANUFACTURER as string,",
						"          BRAND as string,",
						"          SUB_BRAND as string,",
						"          ATTR01 as string,",
						"          ATTR02 as string,",
						"          ATTR03 as string,",
						"          ATTR04 as string,",
						"          ATTR05 as string,",
						"          {판매금액} as string,",
						"          {판매물량} as string,",
						"          {판매수량} as string,",
						"          ND as string,",
						"          WD as string,",
						"          {신제품 출시 년월} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['매출(주문)/외부/유통사MS정보/마켓링크/유통사 MS 데이터_마켓링크_20????_신규카테고리.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          category = {카테고리},",
						"          month = {월별},",
						"          qter = {분기},",
						"          year = {년도},",
						"          ch = {채널},",
						"          region = {지역},",
						"          salesorg = {영업조직},",
						"          onoff = ONOFF,",
						"          item_desc = ITEM_DESC,",
						"          barcode = BARCODE,",
						"          manufacturer = MANUFACTURER,",
						"          brand = BRAND,",
						"          sub_brand = SUB_BRAND,",
						"          attr01 = ATTR01,",
						"          attr02 = ATTR02,",
						"          attr03 = ATTR03,",
						"          attr04 = ATTR04,",
						"          attr05 = ATTR05,",
						"          sales_amt = {판매금액},",
						"          sales_qtm = {판매물량},",
						"          sales_qty = {판매수량},",
						"          nd = ND,",
						"          wd = WD,",
						"          newproduct_date = {신제품 출시 년월}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(yyyymm = replace(substring(toString(currentDate()),1,7),'-',''),",
						"          crt_date = currentDate(),",
						"          newproduct_yyyymm = replace(replace(newproduct_date,'년 ',''),'월','')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          category,",
						"          month,",
						"          qter,",
						"          year,",
						"          ch,",
						"          region,",
						"          salesorg,",
						"          onoff,",
						"          item_desc,",
						"          barcode,",
						"          manufacturer,",
						"          brand,",
						"          sub_brand,",
						"          attr01,",
						"          attr02,",
						"          attr03,",
						"          attr04,",
						"          attr05,",
						"          sales_amt,",
						"          sales_qtm,",
						"          sales_qty,",
						"          nd,",
						"          wd,",
						"          newproduct_date,",
						"          yyyymm,",
						"          crt_date,",
						"          newproduct_yyyymm",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ONLINE_MEMBER_MST')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객분석"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "BOMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "JWMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D2",
								"type": "DatasetReference"
							},
							"name": "BOdelMemberD2"
						},
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "BOdelMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D2",
								"type": "DatasetReference"
							},
							"name": "JWdelMemberD2"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "JWdelMemberD1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "PGSNK1"
						},
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "PKSNK2"
						}
					],
					"transformations": [
						{
							"name": "SelectBestonPk1"
						},
						{
							"name": "SelectJwesPk1"
						},
						{
							"name": "CountBestonPk1"
						},
						{
							"name": "CountJwesPk1"
						},
						{
							"name": "TotalMemberCountBO"
						},
						{
							"name": "TotalMemberCountJW"
						},
						{
							"name": "select1"
						},
						{
							"name": "select4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "BOdeleteCount"
						},
						{
							"name": "BOdelete"
						},
						{
							"name": "join1"
						},
						{
							"name": "BOsnk"
						},
						{
							"name": "select5"
						},
						{
							"name": "select6"
						},
						{
							"name": "exists2"
						},
						{
							"name": "JWdeleteCount"
						},
						{
							"name": "JWdelete"
						},
						{
							"name": "join2"
						},
						{
							"name": "JWsnk"
						}
					],
					"scriptLines": [
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOMemberD1",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWMemberD1",
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOdelMemberD2",
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOdelMemberD1",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWdelMemberD2",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWdelMemberD1",
						"BOMemberD1 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBestonPk1",
						"JWMemberD1 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectJwesPk1",
						"SelectBestonPk1 aggregate(totalMember = count(memno)) ~> CountBestonPk1",
						"SelectJwesPk1 aggregate(pk = count(pk)) ~> CountJwesPk1",
						"CountBestonPk1 derive(mall_gbn = \"BO\",",
						"          cnt_date = currentDate()) ~> TotalMemberCountBO",
						"CountJwesPk1 derive(mall_gbn = \"JW\",",
						"          cntdate = currentDate()) ~> TotalMemberCountJW",
						"BOdelMemberD2 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"BOdelMemberD1 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select1, select4 exists(select1@memno == select4@memno,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 aggregate(delMember = count(memno)) ~> BOdeleteCount",
						"BOdeleteCount derive(cnt_date = currentDate()) ~> BOdelete",
						"TotalMemberCountBO, BOdelete join(TotalMemberCountBO@cnt_date == BOdelete@cnt_date,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          totalmember_cnt = totalMember,",
						"          mall_gbn,",
						"          cntdate = TotalMemberCountBO@cnt_date,",
						"          delmember_cnt = delMember",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> BOsnk",
						"JWdelMemberD2 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"JWdelMemberD1 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select5, select6 exists(select5@pk == select6@pk,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists2",
						"exists2 aggregate(pk = count(pk)) ~> JWdeleteCount",
						"JWdeleteCount derive(cntdate = currentDate()) ~> JWdelete",
						"TotalMemberCountJW, JWdelete join(TotalMemberCountJW@cntdate == JWdelete@cntdate,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          totalmember_cnt = CountJwesPk1@pk,",
						"          mall_gbn,",
						"          cntdate = TotalMemberCountJW@cntdate,",
						"          delmember_cnt = JWdeleteCount@pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> JWsnk",
						"BOsnk sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          totalmember_cnt,",
						"          mall_gbn,",
						"          cntdate,",
						"          delmember_cnt",
						"     )) ~> PGSNK1",
						"JWsnk sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          totalmember_cnt,",
						"          mall_gbn,",
						"          cntdate,",
						"          delmember_cnt",
						"     )) ~> PKSNK2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ONLINE_MEMBER_MST_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객분석"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "BOMemberD1",
							"description": "Import data from DTS_BO_MEMBER_MST_D1"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "JWMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D2",
								"type": "DatasetReference"
							},
							"name": "BOdelMemberD2"
						},
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "BOdelMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D2",
								"type": "DatasetReference"
							},
							"name": "JWdelMemberD2"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "JWdelMemberD1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "PGSNK1"
						},
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "PKSNK2"
						}
					],
					"transformations": [
						{
							"name": "SelectBestonPk1"
						},
						{
							"name": "SelectJwesPk1"
						},
						{
							"name": "CountBestonPk1"
						},
						{
							"name": "CountJwesPk1"
						},
						{
							"name": "TotalMemberCountBO"
						},
						{
							"name": "TotalMemberCountJW"
						},
						{
							"name": "select1"
						},
						{
							"name": "select4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "BOdeleteCount"
						},
						{
							"name": "BOdelete"
						},
						{
							"name": "join1"
						},
						{
							"name": "BOsnk"
						},
						{
							"name": "select5"
						},
						{
							"name": "select6"
						},
						{
							"name": "exists2"
						},
						{
							"name": "JWdeleteCount"
						},
						{
							"name": "JWdelete"
						},
						{
							"name": "join2"
						},
						{
							"name": "JWsnk"
						}
					],
					"scriptLines": [
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOMemberD1",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWMemberD1",
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOdelMemberD2",
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOdelMemberD1",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWdelMemberD2",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWdelMemberD1",
						"BOMemberD1 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBestonPk1",
						"JWMemberD1 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectJwesPk1",
						"SelectBestonPk1 aggregate(totalMember = count(memno)) ~> CountBestonPk1",
						"SelectJwesPk1 aggregate(pk = count(pk)) ~> CountJwesPk1",
						"CountBestonPk1 derive(mall_gbn = \"BO\",",
						"          cnt_date = currentDate()) ~> TotalMemberCountBO",
						"CountJwesPk1 derive(mall_gbn = \"JW\",",
						"          cntdate = currentDate()) ~> TotalMemberCountJW",
						"BOdelMemberD2 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"BOdelMemberD1 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select1, select4 exists(select1@memno == select4@memno,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 aggregate(delMember = count(memno)) ~> BOdeleteCount",
						"BOdeleteCount derive(cnt_date = currentDate()) ~> BOdelete",
						"TotalMemberCountBO, BOdelete join(TotalMemberCountBO@cnt_date == BOdelete@cnt_date,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          totalmember_cnt = totalMember,",
						"          mall_gbn,",
						"          cntdate = TotalMemberCountBO@cnt_date,",
						"          delmember_cnt = delMember",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> BOsnk",
						"JWdelMemberD2 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"JWdelMemberD1 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select5, select6 exists(select5@pk == select6@pk,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists2",
						"exists2 aggregate(pk = count(pk)) ~> JWdeleteCount",
						"JWdeleteCount derive(cntdate = currentDate()) ~> JWdelete",
						"TotalMemberCountJW, JWdelete join(TotalMemberCountJW@cntdate == JWdelete@cntdate,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          totalmember_cnt = CountJwesPk1@pk,",
						"          mall_gbn,",
						"          cntdate = TotalMemberCountJW@cntdate,",
						"          delmember_cnt = JWdeleteCount@pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> JWsnk",
						"BOsnk sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          totalmember_cnt,",
						"          mall_gbn,",
						"          cntdate,",
						"          delmember_cnt",
						"     )) ~> PGSNK1",
						"JWsnk sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          totalmember_cnt,",
						"          mall_gbn,",
						"          cntdate,",
						"          delmember_cnt",
						"     )) ~> PKSNK2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_REMOVE_RT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "리트윗된 컬럼 제",
				"folder": {
					"name": "고객/외부/TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_SRC_DF_P02",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_CSV_DF_SNK",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     AdlsDirectory as string,",
						"     FileName as string",
						"}",
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          content as string,",
						"          retweeted_id as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string,",
						"          retweet_count as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:[(concat($AdlsDirectory, \"/\", $FileName))]) ~> source1",
						"source1 filter(!startsWith(content, \"RT @\")) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat($AdlsDirectory, \"/\", $FileName, \"_copy\"))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_REPLACE_TEXT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_SRC_DF_P02",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_CSV_DF_SNK",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     AdlsDirectory as string,",
						"     FileName as string",
						"}",
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          title as string,",
						"          content as string,",
						"          comments as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:[(concat($AdlsDirectory, \"/\", $FileName))]) ~> source1",
						"source1 derive(content = replace(content, \"'\", \"\\\\qt\\\\\")) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat($AdlsDirectory, \"/\", $FileName))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_RSN_SEARCHING_KEYWORD_M')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "트렌드/외부"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_PG_SEARCH_KEYWORD_M",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "LKS_ADLS_P02",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          skd_id as string,",
						"          site as string,",
						"          site_id as string,",
						"          board_id as string,",
						"          skd_keyword as string,",
						"          skd_search_cnt as string,",
						"          skd_date as string,",
						"          skd_crawl_time as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['/트렌드/외부/검색어추이/D_RSN_네이버검색어추이_일일검색량정보_SEARCH_KEYWORD_DATA_20??????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          skd_keyword,",
						"          skd_search_cnt,",
						"          skd_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SNK_PG_BO_CONTENTS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/내부"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_SNK_PG_BO_CONTENTS",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SNO as string,",
						"          CHANNEL as string,",
						"          CONTENTS as string,",
						"          GOODSNO as string,",
						"          ORDERGOODSNO as string,",
						"          REGDT as string,",
						"          MODDT as string,",
						"          GOODSCD as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          id = SNO,",
						"          contents = CONTENTS,",
						"          write_time = REGDT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(channel_nm = '베스트온_STORE',",
						"          source_nm = 'REVIEW',",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SNK_PG_JWRS_CONTENTS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/내부"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_JWES_CONTENTS",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SEQ_NO as string,",
						"          PK as string,",
						"          HEADLINE as string,",
						"          CONTENTS as string,",
						"          P_CODE as string,",
						"          P_RATING as string,",
						"          ORDERNUMBER as string,",
						"          CRTDT as string,",
						"          MODDT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          id = SEQ_NO,",
						"          title = HEADLINE,",
						"          contents = CONTENTS,",
						"          write_time = CRTDT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(channel_nm = '정원e샵_STORE',",
						"          source_nm = 'REVIEW',",
						"          if_dt = currentTimestamp(),",
						"          id = iifNull(id,''),",
						"          title = replace(replace(replace(title, '//CM//',','),'//LF//','\\n'),'\\0',''),",
						"          contents = substring(replace(replace(replace(contents, '//CM//',','),'//LF//','\\n'),'\\0',''),1,1000),",
						"          write_time = substring(write_time, 1,10)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          title,",
						"          contents,",
						"          write_time,",
						"          channel_nm,",
						"          source_nm,",
						"          if_dt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_SNK_P01",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_SNK_P01",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          content as string,",
						"          retweeted_id as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     multiLineRow: true,",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 alterRow(deleteIf(equals(left(content,4),'RT @'))) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1_TEST_LYJI')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_SNK_P01",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_SNK_P01",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          content as string,",
						"          retweeted_id as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     multiLineRow: true,",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 alterRow(deleteIf(equals(left(content,4),'RT @'))) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mas_test')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_P01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"params": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "@dataset().params"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_D_CD_ODS_SAP_TCURR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"preCopyScript": {
									"value": "delete from @{pipeline().parameters.SinkSchema}.@{pipeline().parameters.SinkTable}",
									"type": "Expression"
								},
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "KURST",
											"type": "String"
										},
										"sink": {
											"name": "kurst",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "FCURR",
											"type": "String"
										},
										"sink": {
											"name": "fcurr",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "TCURR",
											"type": "String"
										},
										"sink": {
											"name": "tcurr",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "GDATU",
											"type": "String"
										},
										"sink": {
											"name": "gdatu",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "UKURS",
											"type": "Double"
										},
										"sink": {
											"name": "ukurs",
											"type": "Decimal",
											"physicalType": "numeric"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DTS_ORACLE_SRC",
								"type": "DatasetReference",
								"parameters": {
									"SourceSchema": {
										"value": "@pipeline().parameters.SourceSchema",
										"type": "Expression"
									},
									"SourceTable": {
										"value": "@pipeline().parameters.SourceTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DTS_POSTGRESQL_SNK",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": {
										"value": "@pipeline().parameters.SinkSchema",
										"type": "Expression"
									},
									"SinkTable": {
										"value": "@pipeline().parameters.SinkTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SourceSchema": {
						"type": "string",
						"defaultValue": "CD_ODS"
					},
					"SourceTable": {
						"type": "string",
						"defaultValue": "SAP_TCURR"
					},
					"SinkSchema": {
						"type": "string",
						"defaultValue": "cd_ods"
					},
					"SinkTable": {
						"type": "string",
						"defaultValue": "sap_tcurr"
					}
				},
				"folder": {
					"name": "매출_주문/내부/ODS"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/API_IND_OUT_WEATHER_D')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PIP_API_INDUSTRY_KMA_WEATHER_D",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Input log",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PIP_API_INDUSTRY_KMA_WEATHER_D",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Input log",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "select CD_IF.FUNC_CDI_LOG(  'I' , p_pipline => 'PIP_API_INDUSTRY_KMA_WEATHER_D' ) as result from dual;",
									"type": "Expression"
								},
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "DTS_ORACLE_SRC",
								"type": "DatasetReference",
								"parameters": {
									"SourceSchema": "1",
									"SourceTable": "1"
								}
							}
						}
					},
					{
						"name": "Output Success log",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "PIP_API_INDUSTRY_KMA_WEATHER_D",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat('select CD_IF.FUNC_CDI_LOG(''U'' , p_seq => ''', activity('Input log').output.firstRow.RESULT, ''', p_result => ''S'') as result from dual')",
									"type": "Expression"
								},
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "DTS_ORACLE_SRC",
								"type": "DatasetReference",
								"parameters": {
									"SourceSchema": "1",
									"SourceTable": "1"
								}
							}
						}
					},
					{
						"name": "Output Error log",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "PIP_API_INDUSTRY_KMA_WEATHER_D",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat('select CD_IF.FUNC_CDI_LOG(''U'' , p_seq => ''', activity('Input log').output.firstRow.RESULT, ''', p_result => ''E'', p_error_msg => ''', replace(activity('PIP_API_INDUSTRY_KMA_WEATHER_D').Error.Message, '''','‘'),''') as result from dual')",
									"type": "Expression"
								},
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "DTS_ORACLE_SRC",
								"type": "DatasetReference",
								"parameters": {
									"SourceSchema": "1",
									"SourceTable": "1"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "실행/Daily"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-15T13:04:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_API_CUSTOMER_KIMCHI_NEWS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "token",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "select_keyword",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DTS_VIVE_API_TOKEN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "select_keyword",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "end date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "select a.gubun \n      ,a.keyword\n      ,string_agg(a.inculde_keyword,',') as inculde_keyword\n      ,a.inculde_keyword_and\n      ,inculde_keyword_add||string_agg(a.inculde_keyword,'||')||inculde_keyword_add2  as api_inculde_keyword\n      ,string_agg(a.db_inculde_keyword,',') as db_inculde_keyword\n  from (\n\t    select gubun\n\t          ,keyword\t\t        \n\t          ,inculde_keyword_and\n\t          ,inculde_keyword\n\t          ,case when length(inculde_keyword_and) !=0 then inculde_keyword_and||'&&(' else '' end  inculde_keyword_add\n              ,case when length(inculde_keyword_and) !=0 then ')' else '' end inculde_keyword_add2\n\t          ,replace(inculde_keyword,'''','''''')  as db_inculde_keyword\n\t          ,row_number() over (partition by gubun, keyword, inculde_keyword_and)/20 as cnt \n\t      from cd_portal.tb_kimchi_roh_news_keyword \n\t\t) a \n where a.gubun = '김치'\n group by a.gubun \n      ,a.keyword\n      ,a.inculde_keyword_and\n      ,a.inculde_keyword_add\n      ,a.inculde_keyword_add2\n order by keyword",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": "1",
									"SinkTable": "1"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "delete table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('select_keyword').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 7,
							"activities": [
								{
									"name": "Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"additionalColumns": [
												{
													"name": "gubun",
													"value": {
														"value": "@item().gubun",
														"type": "Expression"
													}
												},
												{
													"name": "keyword",
													"value": {
														"value": "@item().keyword",
														"type": "Expression"
													}
												},
												{
													"name": "inculde_keyword",
													"value": {
														"value": "@item().inculde_keyword",
														"type": "Expression"
													}
												},
												{
													"name": "inculde_keyword_and",
													"value": {
														"value": "@item().inculde_keyword_and",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "@{concat('Authorization : Bearer ',activity('token').output.value[0].access_token)}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['date']"
													},
													"sink": {
														"name": "date",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['title']"
													},
													"sink": {
														"name": "title",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['content']"
													},
													"sink": {
														"name": "content",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['url']"
													},
													"sink": {
														"name": "url",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['writerName']"
													},
													"sink": {
														"name": "writername",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['documentDate']"
													},
													"sink": {
														"name": "documentdate",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['writerRealName']"
													},
													"sink": {
														"name": "writerrealname",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['gubun']"
													},
													"sink": {
														"name": "gubun",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['keyword']"
													},
													"sink": {
														"name": "keyword",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['inculde_keyword']"
													},
													"sink": {
														"name": "inculde_keyword",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['inculde_keyword_and']"
													},
													"sink": {
														"name": "inculde_keyword_and",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['data']['documentList']",
											"mapComplexValuesToString": true
										}
									},
									"inputs": [
										{
											"referenceName": "DTS_VIVE_API",
											"type": "DatasetReference",
											"parameters": {
												"param": {
													"value": "@concat('/dataplus/social/GetKeywordDocuments?source=news&startDate=',variables('date'),'&endDate=',variables('date2'),'&period=0&rowPerPage=3000&keyword=',item().keyword,'&includeKeyword=',item().api_inculde_keyword)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DTS_POSTGRESQL_SNK_P02",
											"type": "DatasetReference",
											"parameters": {
												"SinkSchema": {
													"value": "@pipeline().parameters.SinkSckema",
													"type": "Expression"
												},
												"SinkTable": {
													"value": "@pipeline().parameters.SinkTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "set date",
						"description": "당일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "date",
							"value": {
								"value": "@if(equals(pipeline().parameters.pip_date,null),formatDateTime(addDays(addHours(utcNow(), 9),-1),'yyyyMMdd'),pipeline().parameters.pip_date)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "end date",
						"description": "당일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "date2",
							"value": {
								"value": "@if(equals(pipeline().parameters.pip_date2,null),formatDateTime(addHours(utcNow(), 9),'yyyyMMdd'),pipeline().parameters.pip_date2)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "excute function",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "SELECT cd_ods.kimchi_roh_news_data('@{variables('date')}' , '@{variables('date2')}' ) AS rtn",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": "1",
									"SinkTable": "1"
								}
							}
						}
					},
					{
						"name": "delete table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "delete from @{pipeline().parameters.SinkSckema}.@{pipeline().parameters.SinkTable}\n where date between '@{variables('date')}' and '@{variables('date2')}';\n\n select 1 as su\n   ",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": "1",
									"SinkTable": "1"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SinkSckema": {
						"type": "string",
						"defaultValue": "cd_ods"
					},
					"SinkTable": {
						"type": "string",
						"defaultValue": "tb_kimchi_roh_news_data_temp"
					},
					"pip_date": {
						"type": "string"
					},
					"pip_date2": {
						"type": "string"
					}
				},
				"variables": {
					"date": {
						"type": "String"
					},
					"date2": {
						"type": "String"
					}
				},
				"folder": {
					"name": "고객/외부/김치 NEWS"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_API_SRM_NEWS_INC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set date",
						"description": "당일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "date",
							"value": {
								"value": "@if(equals(pipeline().parameters.pip_date,null),formatDateTime(addDays(addHours(utcNow(), 9),-1),'yyyyMMdd'),pipeline().parameters.pip_date)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "end date",
						"description": "당일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "date2",
							"value": {
								"value": "@if(equals(pipeline().parameters.pip_date2,null),formatDateTime(addHours(utcNow(), 9),'yyyyMMdd'),pipeline().parameters.pip_date2)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "select_keyword",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "end date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "select a.gubun   \n      ,a.reason \n      ,a.keyword\n      ,string_agg(a.inculde_keyword,',') as inculde_keyword\n      ,a.exculde_keyword \n      ,string_agg(a.inculde_keyword,'||') as api_inculde_keyword\n      ,replace(a.exculde_keyword ,',','||') as api_exculde_keyword\n  from (\n\t\tselect gubun   \n\t\t      ,reason \n\t\t      ,keyword\t\t    \n\t\t      ,exculde_keyword \n\t\t      ,case when regexp_match( inculde_keyword,',') is not null then '('||replace(inculde_keyword,',','&&')||')'\n\t\t            else inculde_keyword\n\t\t        end inculde_keyword         \n\t\t  from cd_ods.tb_srm_news_keyword\n       ) a              \ngroup by  a.gubun   \n      ,a.reason \n      ,a.keyword  \n       ,a.exculde_keyword \norder by a.gubun, a.reason, a.keyword\n       ",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": "1",
									"SinkTable": "1"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "token",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "select_keyword",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DTS_VIVE_API_TOKEN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "delete table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "delete from @{pipeline().parameters.SinkSckema}.@{pipeline().parameters.SinkTable}\n where date between '@{variables('date')}' and '@{variables('date2')}';\n\n select 1 as su\n   ",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": "1",
									"SinkTable": "1"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "delete table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('select_keyword').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 7,
							"activities": [
								{
									"name": "Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"additionalColumns": [
												{
													"name": "keyword",
													"value": {
														"value": "@item().keyword",
														"type": "Expression"
													}
												},
												{
													"name": "inculde_keyword",
													"value": {
														"value": "@item().inculde_keyword",
														"type": "Expression"
													}
												},
												{
													"name": "exculde_keyword",
													"value": {
														"value": "@item().exculde_keyword",
														"type": "Expression"
													}
												},
												{
													"name": "reason",
													"value": {
														"value": "@item().reason",
														"type": "Expression"
													}
												},
												{
													"name": "gubun",
													"value": {
														"value": "@item().gubun",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "@{concat('Authorization : Bearer ',activity('token').output.value[0].access_token)}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['date']"
													},
													"sink": {
														"name": "date",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['title']"
													},
													"sink": {
														"name": "title",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['content']"
													},
													"sink": {
														"name": "content",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['url']"
													},
													"sink": {
														"name": "url",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['writerName']"
													},
													"sink": {
														"name": "writername",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['documentDate']"
													},
													"sink": {
														"name": "documentdate",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['writerRealName']"
													},
													"sink": {
														"name": "writerrealname",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['keyword']"
													},
													"sink": {
														"name": "keyword",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['gubun']"
													},
													"sink": {
														"name": "gubun",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['reason']"
													},
													"sink": {
														"name": "reason",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['inculde_keyword']"
													},
													"sink": {
														"name": "inculde_keyword",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['exculde_keyword']"
													},
													"sink": {
														"name": "exculde_keyword",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['data']['documentList']",
											"mapComplexValuesToString": false
										}
									},
									"inputs": [
										{
											"referenceName": "DTS_VIVE_API",
											"type": "DatasetReference",
											"parameters": {
												"param": {
													"value": "@concat('/dataplus/social/GetKeywordDocuments?source=news&startDate=',variables('date'),'&endDate=',variables('date2'),'&period=0&rowPerPage=3000&keyword=',item().keyword,'&includeKeyword=',item().api_inculde_keyword,'&excludeKeyword=',item().api_exculde_keyword)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DTS_POSTGRESQL_SNK",
											"type": "DatasetReference",
											"parameters": {
												"SinkSchema": {
													"value": "@pipeline().parameters.SinkSckema",
													"type": "Expression"
												},
												"SinkTable": {
													"value": "@pipeline().parameters.SinkTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "delete from cd_ods.tb_srm_news_data where date between '@{variables('date')}' and '@{variables('date2')}';\n\n\ninsert into cd_ods.tb_srm_news_data\n(\n \"date\" \n\t,gubun\n\t,reason\n\t,keyword\n\t,inculde_keyword\n\t,exculde_keyword \n\t,title\n\t,url\n\t,writername \n\t,writerrealname \n\t,documentdate\n)\nselect \"date\" \n\t,gubun\n\t,reason\n\t,keyword\n\t,inculde_keyword\n\t,exculde_keyword \n\t,title\n\t,url\n\t,writername \n\t,writerrealname \n\t,documentdate\n from cd_ods.tb_srm_news_data_temp\n where date between '@{variables('date')}' and '@{variables('date2')}'\n and writername in\n (\n  'KBS'\n,'SBSBiz'\n,'강원도민일보'\n,'강원일보'\n,'경향신문'\n,'국민일보'\n,'국제신문'\n,'노컷뉴스'\n,'농민신문'\n,'뉴스1'\n,'뉴시스'\n,'대전일보'\n,'데일리안'\n,'동아일보'\n,'매일경제'\n,'머니투데이'\n,'문화일보'\n,'부산일보'\n,'아시아경제'\n,'연합뉴스'\n,'이데일리'\n,'조선일보'\n,'중앙일보'\n,'파이낸셜뉴스'\n,'한겨레'\n,'한국경제'\n,'한국일보'\n,'헤럴드경제'\n );\n\nselect 1 as su;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": "1",
									"SinkTable": "1"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SinkSckema": {
						"type": "string",
						"defaultValue": "cd_ods"
					},
					"SinkTable": {
						"type": "string",
						"defaultValue": "tb_srm_news_data_temp"
					},
					"pip_date": {
						"type": "string"
					},
					"pip_date2": {
						"type": "string"
					}
				},
				"variables": {
					"date": {
						"type": "String"
					},
					"date2": {
						"type": "String"
					}
				},
				"folder": {
					"name": "고객/외부/SRM NEWS"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_API_GLOBAL_KIMCHI_NEWS_INC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "token",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "select_keyword",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DTS_VIVE_API_TOKEN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "select_keyword",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "end date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "select keyword     \n        ,exclude_keyword\n        ,include_keyword\n        ,include_keyword_and\n        ,case when include_keyword_and is not null then '('||include_keyword_and||')&('||include_keyword||')'\n              else include_keyword\n          end include_keyword_api\n   from  cd_ods.tb_global_news_keyword",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": "1",
									"SinkTable": "1"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "delete table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('select_keyword').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 7,
							"activities": [
								{
									"name": "Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"additionalColumns": [
												{
													"name": "gubun",
													"value": {
														"value": "foodnews",
														"type": "Expression"
													}
												},
												{
													"name": "keyword",
													"value": {
														"value": "@item().keyword",
														"type": "Expression"
													}
												},
												{
													"name": "include_keyword",
													"value": {
														"value": "@item().include_keyword",
														"type": "Expression"
													}
												},
												{
													"name": "exclude_keyword",
													"value": {
														"value": "@item().exclude_keyword",
														"type": "Expression"
													}
												},
												{
													"name": "include_keyword_and",
													"value": {
														"value": "@item().include_keyword_and",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "@{concat('Authorization : Bearer ',activity('token').output.value[0].access_token)}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['date']"
													},
													"sink": {
														"name": "date",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['title']"
													},
													"sink": {
														"name": "title",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['content']"
													},
													"sink": {
														"name": "content",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['url']"
													},
													"sink": {
														"name": "url",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['writerName']"
													},
													"sink": {
														"name": "writername",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['documentDate']"
													},
													"sink": {
														"name": "documentdate",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['writerRealName']"
													},
													"sink": {
														"name": "writerrealname",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['gubun']"
													},
													"sink": {
														"name": "gubun",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['keyword']"
													},
													"sink": {
														"name": "keyword",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['include_keyword']"
													},
													"sink": {
														"name": "include_keyword",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['exclude_keyword']"
													},
													"sink": {
														"name": "exclude_keyword",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['include_keyword_and']"
													},
													"sink": {
														"name": "include_keyword_and",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['data']['documentList']",
											"mapComplexValuesToString": true
										}
									},
									"inputs": [
										{
											"referenceName": "DTS_VIVE_API",
											"type": "DatasetReference",
											"parameters": {
												"param": {
													"value": "@concat('/dataplus/social/GetKeywordDocuments?type=foodnews&source=news&startDate=',variables('date'),'&endDate=',variables('date2'),'&period=0&rowPerPage=3000&keyword=',item().keyword,'&includeKeyword=',item().include_keyword_api,'&excludeKeyword=',item().exclude_keyword)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DTS_POSTGRESQL_SNK",
											"type": "DatasetReference",
											"parameters": {
												"SinkSchema": {
													"value": "@pipeline().parameters.SinkSckema",
													"type": "Expression"
												},
												"SinkTable": {
													"value": "@pipeline().parameters.SinkTableTemp",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "set date",
						"description": "당일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "date",
							"value": {
								"value": "@if(equals(pipeline().parameters.pip_date,null),formatDateTime(addDays(addHours(utcNow(), 9),-1),'yyyyMMdd'),pipeline().parameters.pip_date)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "end date",
						"description": "당일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "date2",
							"value": {
								"value": "@if(equals(pipeline().parameters.pip_date2,null),formatDateTime(addHours(utcNow(), 9),'yyyyMMdd'),pipeline().parameters.pip_date2)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "delete table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "delete from @{pipeline().parameters.SinkSckema}.@{pipeline().parameters.SinkTableTemp}\n where date between '@{variables('date')}' and '@{variables('date2')}';\n\n select 1 as su\n   ",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": "1",
									"SinkTable": "1"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1_copy1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('select_keyword').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 7,
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"additionalColumns": [
												{
													"name": "gubun2",
													"value": {
														"value": "normal",
														"type": "Expression"
													}
												},
												{
													"name": "keyword",
													"value": {
														"value": "@item().keyword",
														"type": "Expression"
													}
												},
												{
													"name": "include_keyword",
													"value": {
														"value": "@item().include_keyword",
														"type": "Expression"
													}
												},
												{
													"name": "exclude_keyword",
													"value": {
														"value": "@item().exclude_keyword",
														"type": "Expression"
													}
												},
												{
													"name": "include_keyword_and",
													"value": {
														"value": "@item().include_keyword_and",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "@{concat('Authorization : Bearer ',activity('token').output.value[0].access_token)}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['date']"
													},
													"sink": {
														"name": "date",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['title']"
													},
													"sink": {
														"name": "title",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['content']"
													},
													"sink": {
														"name": "content",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['url']"
													},
													"sink": {
														"name": "url",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['writerName']"
													},
													"sink": {
														"name": "writername",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['documentDate']"
													},
													"sink": {
														"name": "documentdate",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['writerRealName']"
													},
													"sink": {
														"name": "writerrealname",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['gubun2']"
													},
													"sink": {
														"name": "gubun",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['keyword']"
													},
													"sink": {
														"name": "keyword",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['include_keyword']"
													},
													"sink": {
														"name": "include_keyword",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['exclude_keyword']"
													},
													"sink": {
														"name": "exclude_keyword",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['include_keyword_and']"
													},
													"sink": {
														"name": "include_keyword_and",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['data']['documentList']",
											"mapComplexValuesToString": true
										}
									},
									"inputs": [
										{
											"referenceName": "DTS_VIVE_API",
											"type": "DatasetReference",
											"parameters": {
												"param": {
													"value": "@concat('/dataplus/social/GetKeywordDocuments?source=news&startDate=',variables('date'),'&endDate=',variables('date2'),'&period=0&rowPerPage=3000&keyword=',item().keyword,'&includeKeyword=',item().include_keyword_and,'&excludeKeyword=',item().exclude_keyword)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DTS_POSTGRESQL_SNK_P02",
											"type": "DatasetReference",
											"parameters": {
												"SinkSchema": {
													"value": "@pipeline().parameters.SinkSckema",
													"type": "Expression"
												},
												"SinkTable": {
													"value": "@pipeline().parameters.SinkTableTemp",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "insert",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "delete from cd_ods.tb_global_news_data where date between '@{variables('date')}' and '@{variables('date2')}';\n\ninsert into cd_ods.tb_global_news_data\n(\n \"date\" \n\t,gubun\n\t,keyword\n\t,include_keyword\n\t,exclude_keyword \n\t,include_keyword_and\n\t,title\n\t,url\n\t,writername \n\t,writerrealname \n\t,documentdate\n\t,select_include_keyword\n)\n     select  a.date\n\t,a.gubun\n\t,a.keyword\n\t,a.include_keyword\n\t,a.exclude_keyword \n\t,a.include_keyword_and\n\t,a.title\n\t,a.url\n\t,a.writername \n\t,a.writerrealname \n\t,a.documentdate\n            ,array_to_string ( array_agg(distinct a.select_inculde_keyword),',' ) as select_include_keyword            \n        from (\n\t\t         select \"date\" \n\t\t\t\t\t\t,gubun\t\n\t\t\t\t\t\t,keyword\n\t\t\t\t\t\t,include_keyword\n\t\t\t\t\t\t,exclude_keyword \n\t\t\t\t\t\t,include_keyword_and\n\t\t\t\t\t\t,title\n\t\t\t\t\t\t,url\n\t\t\t\t\t\t,writername \n\t\t\t\t\t\t,writerrealname \n\t\t\t\t\t\t,documentdate\n\t\t\t\t\t    ,regexp_matches(title||' '||content , replace(include_keyword,'||','|') ,'g') as select_inculde_keyword\t\t\t   \n\t\t\t\t\t\tfrom cd_ods.tb_global_news_data_temp\t\t\t\t\t\n\t\t\t\t\twhere date between '@{variables('date')}' and '@{variables('date2')}'\n\t\t\t\t\t and replace(writername,' ','') not in\n\t\t\t\t\t\t\t\t (\n\t\t\t\t\t\t\t\t  '일간스포츠'\n\t\t\t\t\t\t\t\t  , 'MBC연예'\n\t\t\t\t\t\t\t\t  , '오마이뉴스'\n\t\t\t\t\t\t\t\t  , '코메디닷컴'\n\t\t\t\t\t\t\t\t  , '스포티비뉴스'\n\t\t\t\t\t\t\t\t  , '연합뉴스TN'\n\t\t\t\t\t\t\t\t  , '스타뉴스'\n\t\t\t\t\t\t\t\t  , 'OSEN'\n\t\t\t\t\t\t\t\t )\n\t\t\t\t--\tand title ='백화점부터 도서관까지…기능성 천장재 도입 사례 확산'\n                 ) a\n     group by  a.date\n\t,a.gubun\n\t,a.keyword\n\t,a.include_keyword\n\t,a.exclude_keyword \n\t,a.include_keyword_and\n\t,a.title\n\t,a.url\n\t,a.writername \n\t,a.writerrealname \n\t,a.documentdate    ;            \n                 \nselect 1 as su;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": "1",
									"SinkTable": "1"
								}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SinkSckema": {
						"type": "string",
						"defaultValue": "cd_ods"
					},
					"SinkTable": {
						"type": "string",
						"defaultValue": "tb_global_news_data"
					},
					"pip_date": {
						"type": "string"
					},
					"pip_date2": {
						"type": "string"
					},
					"SinkTableTemp": {
						"type": "string",
						"defaultValue": "tb_global_news_data_temp"
					}
				},
				"variables": {
					"date": {
						"type": "String"
					},
					"date2": {
						"type": "String"
					}
				},
				"folder": {
					"name": "고객/외부/김치 NEWS"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_D_SRM_DAILY_UPDATE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1_copy1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "SELECT cd_ods.fn_srm_item_risk_update();",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": "1",
									"SinkTable": "1"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "트렌드/외부/SRM"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-18T04:57:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_API_INDUSTRY_MAS_DEMAND_AGENCY_INC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "수요기관정보조회_증분처리",
				"activities": [
					{
						"name": "set strdt",
						"description": "당일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "strdt",
							"value": {
								"value": "@concat(formatDateTime(adddays(addHours(utcNow(), 9), -7), 'yyyyMMdd'),'0000')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set enddt",
						"description": "당일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "enddt",
							"value": {
								"value": "@concat(formatDateTime(adddays(addHours(utcNow(), 9), -1), 'yyyyMMdd'),'2359')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "delet table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set strdt",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set enddt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "delete from  @{pipeline().parameters.SinkSchema}.@{pipeline().parameters.SinkTable};\n \nselect 1 as success",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": "1",
									"SinkTable": "1"
								}
							}
						}
					},
					{
						"name": "get page",
						"description": "대표 제품의 생성 기간동안 토탈 건수 ",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "delet table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DTS_PPS_API_JSON",
								"type": "DatasetReference",
								"parameters": {
									"params": {
										"value": "@concat('/1230000/ao/UsrInfoService/',pipeline().parameters.service,'?type=json&inqryDiv=1&pageNo=1&numOfRows=1&inqryBgnDt=',variables('strdt'),'&inqryEndDt=',variables('enddt'),'&ServiceKey=',pipeline().parameters.Apikey)",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get page",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1  \n      ,add(\n             div(\n                  int(activity('get page').output.firstRow.response.body.totalCount) \n                 ,int(pipeline().parameters.one_page_row)                  \n                )\n            ,if(\n                greater(\n                        mod(\n                            int(activity('get page').output.firstRow.response.body.totalCount) \n                        ,int(pipeline().parameters.one_page_row)   \n                            )\n                       ,0\n                       )\n                ,1,0\n            )           \n       )\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['dminsttCd']"
													},
													"sink": {
														"name": "dminstt_cd",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['vldPrdBgnDt']"
													},
													"sink": {
														"name": "vld_prd_bgn_dt",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['vldPrdEndDt']"
													},
													"sink": {
														"name": "vld_prd_end_dt",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['dminsttNm']"
													},
													"sink": {
														"name": "dminstt_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['dminsttAbrvtNm']"
													},
													"sink": {
														"name": "dminstt_abrvt_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['dminsttEngNm']"
													},
													"sink": {
														"name": "dminstt_eng_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['corprtRgstNo']"
													},
													"sink": {
														"name": "corprt_rgst_no",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['bizno']"
													},
													"sink": {
														"name": "bizno",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['jrsdctnDivNm']"
													},
													"sink": {
														"name": "jrsdctn_div_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['insttTyCdLrgclsfcNm']"
													},
													"sink": {
														"name": "instt_ty_cd_lrgclsfc_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['insttTyCdMidclsfcNm']"
													},
													"sink": {
														"name": "instt_ty_cd_midclsfc_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['insttTyCdSmlclsfcNm']"
													},
													"sink": {
														"name": "instt_ty_cd_smlclsfc_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['bizcndtnNm']"
													},
													"sink": {
														"name": "bizcndtn_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['indstrytyNm']"
													},
													"sink": {
														"name": "indstryty_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['ofclFaxNo']"
													},
													"sink": {
														"name": "ofcl_fax_no",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['rgnCd']"
													},
													"sink": {
														"name": "rgn_cd",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['rgnNm']"
													},
													"sink": {
														"name": "rgn_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['zip']"
													},
													"sink": {
														"name": "zip",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['adrs']"
													},
													"sink": {
														"name": "adrs",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['dtlAdrs']"
													},
													"sink": {
														"name": "dtl_adrs",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['telNo']"
													},
													"sink": {
														"name": "tel_no",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['faxNo']"
													},
													"sink": {
														"name": "fax_no",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['hmpgAdrs']"
													},
													"sink": {
														"name": "hmpg_adrs",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['dltYn']"
													},
													"sink": {
														"name": "dlt_yn",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['toplvlInsttCd']"
													},
													"sink": {
														"name": "toplvl_instt_cd",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['toplvlInsttNm']"
													},
													"sink": {
														"name": "toplvl_instt_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['rgstDt']"
													},
													"sink": {
														"name": "rgst_dt",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['chgDt']"
													},
													"sink": {
														"name": "chg_dt",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['response']['body']['items']",
											"mapComplexValuesToString": false
										}
									},
									"inputs": [
										{
											"referenceName": "DTS_PPS_API_JSON",
											"type": "DatasetReference",
											"parameters": {
												"params": {
													"value": "@concat('/1230000/ao/UsrInfoService/',pipeline().parameters.service,'?type=json&inqryDiv=1&pageNo=',item(),'&numOfRows=',pipeline().parameters.one_page_row,'&inqryBgnDt=',variables('strdt'),'&inqryEndDt=',variables('enddt'),'&ServiceKey=',pipeline().parameters.Apikey)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DTS_POSTGRESQL_SNK",
											"type": "DatasetReference",
											"parameters": {
												"SinkSchema": {
													"value": "@pipeline().parameters.SinkSchema",
													"type": "Expression"
												},
												"SinkTable": {
													"value": "@pipeline().parameters.SinkTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "get page_copy1",
						"description": "대표 제품의 생성 기간동안 토탈 건수 ",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DTS_PPS_API_JSON",
								"type": "DatasetReference",
								"parameters": {
									"params": {
										"value": "@concat('/1230000/ao/UsrInfoService/',pipeline().parameters.service,'?type=json&inqryDiv=2&pageNo=1&numOfRows=1&inqryBgnDt=',variables('strdt'),'&inqryEndDt=',variables('enddt'),'&ServiceKey=',pipeline().parameters.Apikey)",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "ForEach1_copy1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get page_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1  \n      ,add(\n             div(\n                  int(activity('get page_copy1').output.firstRow.response.body.totalCount) \n                 ,int(pipeline().parameters.one_page_row)                  \n                )\n            ,if(\n                greater(\n                        mod(\n                            int(activity('get page_copy1').output.firstRow.response.body.totalCount) \n                        ,int(pipeline().parameters.one_page_row)   \n                            )\n                       ,0\n                       )\n                ,1,0\n            )           \n       )\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1_copy1_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['dminsttCd']"
													},
													"sink": {
														"name": "dminstt_cd",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['vldPrdBgnDt']"
													},
													"sink": {
														"name": "vld_prd_bgn_dt",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['vldPrdEndDt']"
													},
													"sink": {
														"name": "vld_prd_end_dt",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['dminsttNm']"
													},
													"sink": {
														"name": "dminstt_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['dminsttAbrvtNm']"
													},
													"sink": {
														"name": "dminstt_abrvt_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['dminsttEngNm']"
													},
													"sink": {
														"name": "dminstt_eng_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['corprtRgstNo']"
													},
													"sink": {
														"name": "corprt_rgst_no",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['bizno']"
													},
													"sink": {
														"name": "bizno",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['jrsdctnDivNm']"
													},
													"sink": {
														"name": "jrsdctn_div_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['insttTyCdLrgclsfcNm']"
													},
													"sink": {
														"name": "instt_ty_cd_lrgclsfc_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['insttTyCdMidclsfcNm']"
													},
													"sink": {
														"name": "instt_ty_cd_midclsfc_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['insttTyCdSmlclsfcNm']"
													},
													"sink": {
														"name": "instt_ty_cd_smlclsfc_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['bizcndtnNm']"
													},
													"sink": {
														"name": "bizcndtn_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['indstrytyNm']"
													},
													"sink": {
														"name": "indstryty_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['ofclFaxNo']"
													},
													"sink": {
														"name": "ofcl_fax_no",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['rgnCd']"
													},
													"sink": {
														"name": "rgn_cd",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['rgnNm']"
													},
													"sink": {
														"name": "rgn_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['zip']"
													},
													"sink": {
														"name": "zip",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['adrs']"
													},
													"sink": {
														"name": "adrs",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['dtlAdrs']"
													},
													"sink": {
														"name": "dtl_adrs",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['telNo']"
													},
													"sink": {
														"name": "tel_no",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['faxNo']"
													},
													"sink": {
														"name": "fax_no",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['hmpgAdrs']"
													},
													"sink": {
														"name": "hmpg_adrs",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['dltYn']"
													},
													"sink": {
														"name": "dlt_yn",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['toplvlInsttCd']"
													},
													"sink": {
														"name": "toplvl_instt_cd",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['toplvlInsttNm']"
													},
													"sink": {
														"name": "toplvl_instt_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['rgstDt']"
													},
													"sink": {
														"name": "rgst_dt",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['chgDt']"
													},
													"sink": {
														"name": "chg_dt",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['response']['body']['items']",
											"mapComplexValuesToString": false
										}
									},
									"inputs": [
										{
											"referenceName": "DTS_PPS_API_JSON",
											"type": "DatasetReference",
											"parameters": {
												"params": {
													"value": "@concat('/1230000/ao/UsrInfoService/',pipeline().parameters.service,'?type=json&inqryDiv=2&pageNo=',item(),'&numOfRows=',pipeline().parameters.one_page_row,'&inqryBgnDt=',variables('strdt'),'&inqryEndDt=',variables('enddt'),'&ServiceKey=',pipeline().parameters.Apikey)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DTS_POSTGRESQL_SNK",
											"type": "DatasetReference",
											"parameters": {
												"SinkSchema": {
													"value": "@pipeline().parameters.SinkSchema",
													"type": "Expression"
												},
												"SinkTable": {
													"value": "@pipeline().parameters.SinkTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Apikey": {
						"type": "string",
						"defaultValue": "rj5HeIJYh3E2HRvmEw3P3%2BeVDZoZj074w7IIt%2BpcAaujPSI9CTx0U88XSd6C9eWwkBMUncCaG4w%2FtYRT898jcw%3D%3D"
					},
					"service": {
						"type": "string",
						"defaultValue": "getDminsttInfo"
					},
					"SinkSchema": {
						"type": "string",
						"defaultValue": "cd_ods"
					},
					"SinkTable": {
						"type": "string",
						"defaultValue": "tb_mas_demand_agency_increase"
					},
					"one_page_row": {
						"type": "string",
						"defaultValue": "999"
					},
					"pipstrdt": {
						"type": "string"
					},
					"pipenddt": {
						"type": "string"
					}
				},
				"variables": {
					"strdt": {
						"type": "String"
					},
					"enddt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Industry/외부/조달청"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-16T07:55:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_API_INDUSTRY_MAS_SUCCESSFUL_BID_LIST_STATUS_THINGS_INC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "낙찰된 목록 현황 물품조회",
				"activities": [
					{
						"name": "set strdt",
						"description": "당일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "strdt",
							"value": {
								"value": "@concat(formatDateTime(adddays(addHours(utcNow(), 9), -7), 'yyyyMMdd'),'0000')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set enddt",
						"description": "당일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "enddt",
							"value": {
								"value": "@concat(formatDateTime(adddays(addHours(utcNow(), 9), -1), 'yyyyMMdd'),'0000')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "delet table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set strdt",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set enddt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "delete from  @{pipeline().parameters.SinkSchema}.@{pipeline().parameters.SinkTable}       \n WHERE  REGEXP_REPLACE(rgstDt, '[^0-9]','','g') BETWEEN '@{variables('strdt')}' AND '@{variables('enddt')}';\n \nselect 1 as success",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": "1",
									"SinkTable": "1"
								}
							}
						}
					},
					{
						"name": "get page",
						"description": "대표 제품의 생성 기간동안 토탈 건수 ",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "delet table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DTS_PPS_API_JSON",
								"type": "DatasetReference",
								"parameters": {
									"params": {
										"value": "@concat('/1230000/as/ScsbidInfoService/',pipeline().parameters.service,'?type=json&inqryDiv=1&pageNo=1&numOfRows=1&inqryBgnDt=',variables('strdt'),'&inqryEndDt=',variables('enddt'),'&ServiceKey=',pipeline().parameters.Apikey)",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get page",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1  \n      ,add(\n             div(\n                  int(activity('get page').output.firstRow.response.body.totalCount) \n                 ,int(pipeline().parameters.one_page_row)                  \n                )\n            ,if(\n                greater(\n                        mod(\n                            int(activity('get page').output.firstRow.response.body.totalCount) \n                        ,int(pipeline().parameters.one_page_row)   \n                            )\n                       ,0\n                       )\n                ,1,0\n            )           \n       )\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['bidNtceNo']"
													},
													"sink": {
														"name": "bidntceno",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['bidNtceOrd']"
													},
													"sink": {
														"name": "bidntceord",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['bidClsfcNo']"
													},
													"sink": {
														"name": "bidclsfcno",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['rbidNo']"
													},
													"sink": {
														"name": "rbidno",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['ntceDivCd']"
													},
													"sink": {
														"name": "ntcedivcd",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['bidNtceNm']"
													},
													"sink": {
														"name": "bidntcenm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['prtcptCnum']"
													},
													"sink": {
														"name": "prtcptcnum",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['bidwinnrNm']"
													},
													"sink": {
														"name": "bidwinnrnm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['bidwinnrBizno']"
													},
													"sink": {
														"name": "bidwinnrbizno",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['bidwinnrCeoNm']"
													},
													"sink": {
														"name": "bidwinnrceonm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['bidwinnrAdrs']"
													},
													"sink": {
														"name": "bidwinnradrs",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['bidwinnrTelNo']"
													},
													"sink": {
														"name": "bidwinnrtelno",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['sucsfbidAmt']"
													},
													"sink": {
														"name": "sucsfbidamt",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['sucsfbidRate']"
													},
													"sink": {
														"name": "sucsfbidrate",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['rlOpengDt']"
													},
													"sink": {
														"name": "rlopengdt",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['dminsttCd']"
													},
													"sink": {
														"name": "dminsttcd",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['dminsttNm']"
													},
													"sink": {
														"name": "dminsttnm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['rgstDt']"
													},
													"sink": {
														"name": "rgstdt",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['fnlSucsfDate']"
													},
													"sink": {
														"name": "fnlsucsfdate",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['fnlSucsfCorpOfcl']"
													},
													"sink": {
														"name": "fnlsucsfcorpofcl",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['linkInsttNm']"
													},
													"sink": {
														"name": "linkinsttnm",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['response']['body']['items']",
											"mapComplexValuesToString": false
										}
									},
									"inputs": [
										{
											"referenceName": "DTS_PPS_API_JSON",
											"type": "DatasetReference",
											"parameters": {
												"params": {
													"value": "@concat('/1230000/as/ScsbidInfoService/',pipeline().parameters.service,'?type=json&inqryDiv=1&pageNo=',item(),'&numOfRows=',pipeline().parameters.one_page_row,'&inqryBgnDt=',variables('strdt'),'&inqryEndDt=',variables('enddt'),'&ServiceKey=',pipeline().parameters.Apikey)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DTS_POSTGRESQL_SNK",
											"type": "DatasetReference",
											"parameters": {
												"SinkSchema": {
													"value": "@pipeline().parameters.SinkSchema",
													"type": "Expression"
												},
												"SinkTable": {
													"value": "@pipeline().parameters.SinkTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Apikey": {
						"type": "string",
						"defaultValue": "rj5HeIJYh3E2HRvmEw3P3%2BeVDZoZj074w7IIt%2BpcAaujPSI9CTx0U88XSd6C9eWwkBMUncCaG4w%2FtYRT898jcw%3D%3D"
					},
					"service": {
						"type": "string",
						"defaultValue": "getScsbidListSttusThng"
					},
					"SinkSchema": {
						"type": "string",
						"defaultValue": "cd_ods"
					},
					"SinkTable": {
						"type": "string",
						"defaultValue": "tb_mas_successful_bid_list_status_things"
					},
					"one_page_row": {
						"type": "string",
						"defaultValue": "999"
					},
					"pipstrdt": {
						"type": "string"
					},
					"pipenddt": {
						"type": "string"
					}
				},
				"variables": {
					"strdt": {
						"type": "String"
					},
					"enddt": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Industry/외부/조달청"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-16T07:55:39Z"
			},
			"dependsOn": []
		}
	]
}