{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory 이름",
			"defaultValue": "CDI-Hub-ADF-p01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DTS_RSN_SRC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LKS_RSN_P01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceTable": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source/RSN"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@dataset().SourceTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_RSN_SEARCHING_KEYWORD_INC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "트렌드/외부"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_PG_SEARCH_KEYWORD_INC",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "LKS_ADLS_P02",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          skd_id as string,",
						"          site as string,",
						"          site_id as string,",
						"          board_id as string,",
						"          skd_keyword as string,",
						"          skd_search_cnt as string,",
						"          skd_date as string,",
						"          skd_crawl_time as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          skd_keyword,",
						"          skd_search_cnt,",
						"          skd_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ADLS_PG_STORE_REVIEW_INC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/RSN"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_RSN_STORE_REVIEW_INC",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          srd_id as string,",
						"          sd_reviewid as string,",
						"          site as string,",
						"          site_id as string,",
						"          srd_title as string,",
						"          srd_content as string,",
						"          srd_writer as string,",
						"          srd_writetime as string,",
						"          srd_rate as string,",
						"          srd_crawl_time as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          id = srd_id,",
						"          sd_review_id = sd_reviewid,",
						"          channel_nm = site,",
						"          title = srd_title,",
						"          contents = srd_content,",
						"          write_time = srd_writetime,",
						"          srd_rate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(contents = substring(replace(replace(contents, '//CM//',','),'//LF//','\\n'),1,1000),",
						"          write_time = toDate(substring(write_time,1,10)),",
						"          title = replace(replace(title, '//CM//',','),'//LF//','\\n'),",
						"          source_nm = \"REVIEW\",",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          sd_review_id,",
						"          channel_nm,",
						"          title,",
						"          contents,",
						"          write_time,",
						"          srd_rate,",
						"          source_nm,",
						"          if_dt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DTS_API_DITBCD_SRC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "식품안전나라_유통바코호출\n가능하면 안전나라 3가지 사용",
				"linkedServiceName": {
					"referenceName": "HttpServer_FoodSafety",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ApiKey": {
						"type": "string"
					},
					"StartIdx": {
						"type": "string"
					},
					"EndIdx": {
						"type": "string"
					},
					"ServiceId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "Xml",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('/api/',dataset().ApiKey,'/',dataset().ServiceId,'/xml/',dataset().StartIdx,'/',dataset().EndIdx)",
							"type": "Expression"
						}
					},
					"nullValue": "''"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ADLS_PG_CUSTOMER_OPINION_TWITTER_INC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/소셜고객의견데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_SNK_CUSTOMER_OPINION_TWITTER_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          content as string,",
						"          retweeted_id as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string,",
						"          retweet_count as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/소셜고객의견데이터/트위터/Temp/소셜고객의견데이터_트위터_20??????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          write_time = date,",
						"          channel_nm = project_id,",
						"          id,",
						"          url,",
						"          contents = content,",
						"          topic_ids",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(write_time = toDate(write_time,'yyyyMMdd'),",
						"          id = iifNull(id,''),",
						"          contents = substring(replace(replace(contents, '//CM//',','),'//LF//','\\n'),1,1000),",
						"          source_nm = \"SOCIAL\",",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          write_time,",
						"          channel_nm,",
						"          id,",
						"          url,",
						"          contents,",
						"          source_nm,",
						"          if_dt,",
						"          topic_ids",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DTS_CUSTOMER_TOPKEYWORD_CsvGz')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_CUSTOMER_OPINION",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"channel": {
						"type": "string"
					},
					"date": {
						"type": "string"
					},
					"authkey": {
						"type": "string"
					},
					"category1": {
						"type": "string"
					},
					"category2": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source/바이브컴퍼니"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('/download/',dataset().category1,'/DAESANG/',dataset().category2,'/',dataset().channel,'/',dataset().date,'?authkey=',dataset().authkey)",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"compressionCodec": "gzip",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CUSTOMER_TRANSITION_JsonGz')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_CUSTOMER_OPINION",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"date": {
						"type": "string"
					},
					"authkey": {
						"type": "string"
					},
					"category1": {
						"type": "string"
					},
					"category2": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('/download/',dataset().category1,'/DAESANG/',dataset().category2,'/',dataset().date,'?authkey=',dataset().authkey)",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "gzip",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CUSTOMER_OPINION_JsonGz')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_CUSTOMER_OPINION",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"channel": {
						"type": "string"
					},
					"date": {
						"type": "string"
					},
					"authkey": {
						"type": "string"
					},
					"category1": {
						"type": "string"
					},
					"category2": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('/download/',dataset().category1,'/DAESANG/',dataset().category2,'/',dataset().channel,'/',dataset().date,'?authkey=',dataset().authkey)",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "gzip",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ADLS_PG_CUSTOMER_OPINION_BLOG_INC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/소셜고객의견데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_SNK_CUSTOMER_OPINION_BLOG_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          title as string,",
						"          content as string,",
						"          tag as string,",
						"          site_name as string,",
						"          author_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/소셜고객의견데이터/블로그/Temp/소셜고객의견데이터_블로그_20??????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          write_time = date,",
						"          channel_nm = project_id,",
						"          id,",
						"          url,",
						"          title,",
						"          contents = content,",
						"          topic_ids",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(write_time = toDate(write_time,'yyyyMMdd'),",
						"          id = iifNull(id,''),",
						"          title = replace(replace(title, '//CM//',','),'//LF//','\\n'),",
						"          contents = substring(replace(replace(contents, '//CM//',','),'//LF//','\\n'),1,1000),",
						"          source_nm = \"SOCIAL\",",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          write_time,",
						"          channel_nm,",
						"          id,",
						"          url,",
						"          title,",
						"          contents,",
						"          source_nm,",
						"          if_dt,",
						"          topic_ids",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ADLS_PG_CUSTOMER_OPINION_COMM_INC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/소셜고객의견데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_SNK_CUSTOMER_OPINION_COMM_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          title as string,",
						"          content as string,",
						"          vks as string,",
						"          site_id as string,",
						"          site_name as string,",
						"          board_id as string,",
						"          board_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/소셜고객의견데이터/커뮤니티/Temp/소셜고객의견데이터_커뮤니티_20??????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          write_time = date,",
						"          channel_nm = project_id,",
						"          id,",
						"          url,",
						"          title,",
						"          contents = content,",
						"          board_name,",
						"          topic_ids",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(write_time = toDate(write_time,'yyyyMMdd'),",
						"          id = iifNull(id,''),",
						"          title = replace(replace(title, '//CM//',','),'//LF//','\\n'),",
						"          contents = substring(replace(replace(contents, '//CM//',','),'//LF//','\\n'),1,1000),",
						"          source_nm = \"SOCIAL\",",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          write_time,",
						"          channel_nm,",
						"          id,",
						"          url,",
						"          title,",
						"          contents,",
						"          board_name,",
						"          source_nm,",
						"          if_dt,",
						"          topic_ids",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ADLS_PG_CUSTOMER_OPINION_NEWS_INC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/소셜고객의견데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_SNK_CUSTOMER_OPINION_NEWS_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          title as string,",
						"          content as string,",
						"          comment_count as string,",
						"          site_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/소셜고객의견데이터/뉴스/Temp/소셜고객의견데이터_뉴스_202?????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          write_time = date,",
						"          channel_nm = project_id,",
						"          id,",
						"          url,",
						"          title,",
						"          contents = content,",
						"          topic_ids",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(write_time = toDate(write_time,'yyyyMMdd'),",
						"          id = iifNull(id,''),",
						"          title = replace(replace(title, '//CM//',','),'//LF//','\\n'),",
						"          contents = substring(replace(replace(contents, '//CM//',','),'//LF//','\\n'),1,1000),",
						"          source_nm = \"SOCIAL\",",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          write_time,",
						"          channel_nm,",
						"          id,",
						"          url,",
						"          title,",
						"          contents,",
						"          source_nm,",
						"          if_dt,",
						"          topic_ids",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ADLS_PG_CUSTOMER_OPINION_INSTA_INC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/소셜고객의견데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_SNK_CUSTOMER_OPINION_INSTA_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          content as string,",
						"          comment_count as string,",
						"          like_count as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/소셜고객의견데이터/인스타그램/Temp/소셜고객의견데이터_인스타그램_20??????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          write_time = date,",
						"          channel_nm = project_id,",
						"          id,",
						"          url,",
						"          contents = content,",
						"          topic_ids",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(write_time = toDate(write_time,'yyyyMMdd'),",
						"          id = iifNull(id,''),",
						"          contents = substring(replace(replace(contents, '//CM//',','),'//LF//','\\n'),1,1000),",
						"          source_nm = \"SOCIAL\",",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          write_time,",
						"          channel_nm,",
						"          id,",
						"          url,",
						"          contents,",
						"          source_nm,",
						"          if_dt,",
						"          topic_ids",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ADLS_PG_CUSTOMER_OPINION_YOUTUBE_INC_TEST')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/소셜고객의견데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_SNK_CUSTOMER_OPINION_YOUTUBE_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          title as string,",
						"          content as string,",
						"          comments as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/소셜고객의견데이터/유튜브/Temp/소셜고객의견데이터_유튜브_202?????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          write_time = date,",
						"          channel_nm = project_id,",
						"          id,",
						"          url,",
						"          title,",
						"          contents = content,",
						"          topic_ids",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(write_time = toDate(write_time,'yyyyMMdd'),",
						"          id = iifNull(id,''),",
						"          contents = substring(replace(replace(contents, '//CM//',','),'//LF//','\\n'),1,1000),",
						"          title = replace(replace(title, '//CM//',','),'//LF//','\\n'),",
						"          source_nm = \"SOCIAL\",",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          write_time,",
						"          channel_nm,",
						"          id,",
						"          url,",
						"          title,",
						"          contents,",
						"          source_nm,",
						"          if_dt,",
						"          topic_ids",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DTS_CUSTOMER_ASSOCIATION_CsvGz')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_CUSTOMER_OPINION",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"channel": {
						"type": "string"
					},
					"date": {
						"type": "string"
					},
					"authkey": {
						"type": "string"
					},
					"category1": {
						"type": "string"
					},
					"category2": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Source/바이브컴퍼니"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('/download/',dataset().category1,'/DAESANG/',dataset().category2,'/',dataset().channel,'/',dataset().date,'?authkey=',dataset().authkey)",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"compressionCodec": "gzip",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_API_INDUSTRY_GARAK_IMPORTQUANTITY_AFTERAUCTION')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "유통정보 - 가락시장 반입물량(경매후)",
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "SELECT to_char(now(),'YYYYMMDD') as date\r\n;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": {
										"value": "@pipeline().parameters.SinkSchema",
										"type": "Expression"
									},
									"SinkTable": {
										"value": "@pipeline().parameters.SinkTable",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 15,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"additionalColumns": [
												{
													"name": "date",
													"value": {
														"value": "@item().date",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['BURYU']"
													},
													"sink": {
														"name": "buryu",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['SORT_CD']"
													},
													"sink": {
														"name": "sort_cd",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['ITM_CD']"
													},
													"sink": {
														"name": "itm_cd",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['ITM_NM']"
													},
													"sink": {
														"name": "itm_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['CORP_CD_1']"
													},
													"sink": {
														"name": "corp_cd_1",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['CORP_CD_2']"
													},
													"sink": {
														"name": "corp_cd_2",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['CORP_CD_3']"
													},
													"sink": {
														"name": "corp_cd_3",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['CORP_CD_4']"
													},
													"sink": {
														"name": "corp_cd_4",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['CORP_CD_5']"
													},
													"sink": {
														"name": "corp_cd_5",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['CORP_CD_6']"
													},
													"sink": {
														"name": "corp_cd_6",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['SUM_TOT']"
													},
													"sink": {
														"name": "sum_tot",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['date']"
													},
													"sink": {
														"name": "date",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['resultData']",
											"mapComplexValuesToString": false
										}
									},
									"inputs": [
										{
											"referenceName": "DTS_API_GARAK",
											"type": "DatasetReference",
											"parameters": {
												"url": {
													"value": "@concat('/publicdata/dataJsonOpen.do?id=3604&passwd=days2023!&dataid=data21&pagesize=1000&pageidx=1&portal.templet=false&date=',item().date)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DTS_POSTGRESQL_SNK_P02",
											"type": "DatasetReference",
											"parameters": {
												"SinkSchema": {
													"value": "@pipeline().parameters.SinkSchema",
													"type": "Expression"
												},
												"SinkTable": {
													"value": "@pipeline().parameters.SinkTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SinkSchema": {
						"type": "string",
						"defaultValue": "cd_ods"
					},
					"SinkTable": {
						"type": "string",
						"defaultValue": "tb_garak_importquantity_afterauction"
					}
				},
				"variables": {
					"date": {
						"type": "String"
					},
					"url": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Industry/외부/서울특별시_농수산식품공사"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-16T07:55:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_API_INDUSTRY_GARAK_IMPORTQUANTITY_AFTERSETTLEMENT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "유통정보 - 가락시장 반입물량(정산후)",
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "SELECT to_char(generate_series(max(date)::date + INTERVAL '1 day', now() - INTERVAL '1 day', '1 day'),'YYYYMMDD') as date\r\nFROM cd_ods.tb_garak_importquantity_aftersettlement\r\n;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": {
										"value": "@pipeline().parameters.SinkSchema",
										"type": "Expression"
									},
									"SinkTable": {
										"value": "@pipeline().parameters.SinkTable",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 15,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"additionalColumns": [
												{
													"name": "date",
													"value": {
														"value": "@item().date",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['BURYU']"
													},
													"sink": {
														"name": "buryu",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['SORT_CD']"
													},
													"sink": {
														"name": "sort_cd",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['PUM_CD']"
													},
													"sink": {
														"name": "pum_cd",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['PUM_NM']"
													},
													"sink": {
														"name": "pum_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['CORP_CD_1']"
													},
													"sink": {
														"name": "corp_cd_1",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['CORP_CD_2']"
													},
													"sink": {
														"name": "corp_cd_2",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['CORP_CD_3']"
													},
													"sink": {
														"name": "corp_cd_3",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['CORP_CD_4']"
													},
													"sink": {
														"name": "corp_cd_4",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['CORP_CD_5']"
													},
													"sink": {
														"name": "corp_cd_5",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['CORP_CD_6']"
													},
													"sink": {
														"name": "corp_cd_6",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['SUM_TOT']"
													},
													"sink": {
														"name": "sum_tot",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['date']"
													},
													"sink": {
														"name": "date",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['resultData']",
											"mapComplexValuesToString": false
										}
									},
									"inputs": [
										{
											"referenceName": "DTS_API_GARAK",
											"type": "DatasetReference",
											"parameters": {
												"url": {
													"value": "@concat('/publicdata/dataJsonOpen.do?id=3605&passwd=days2023!&dataid=data22&pagesize=1000&pageidx=1&portal.templet=false&date=',item().date)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DTS_POSTGRESQL_SNK_P02",
											"type": "DatasetReference",
											"parameters": {
												"SinkSchema": {
													"value": "@pipeline().parameters.SinkSchema",
													"type": "Expression"
												},
												"SinkTable": {
													"value": "@pipeline().parameters.SinkTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SinkSchema": {
						"type": "string",
						"defaultValue": "cd_ods"
					},
					"SinkTable": {
						"type": "string",
						"defaultValue": "tb_garak_importquantity_aftersettlement"
					}
				},
				"variables": {
					"date": {
						"type": "String"
					},
					"url": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Industry/외부/서울특별시_농수산식품공사"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-16T07:55:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_API_INDUSTRY_GARAK_PRICEBYITEMGRADE_INTERMEDIARY')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "유통정보(중도매인거래) - 품목별등급별가격",
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "select to_char(now(),'YYYYMMDD') as date\n,to_char(now() - INTERVAL '1 day','YYYYMMDD') as date_p\n,to_char(now() - INTERVAL '7 day','YYYYMMDD') as date_p7\n,'garak' as market\nFROM cd_ods.tb_garak_pricebyitemgrade_intermediary\nunion\nselect \nto_char(now(),'YYYYMMDD') as date\n,to_char(now() - INTERVAL '1 day','YYYYMMDD') as date_p\n,to_char(now() - INTERVAL '7 day','YYYYMMDD') as date_p7\n,'yanggok' as market\nFROM cd_ods.tb_garak_pricebyitemgrade_intermediary\norder by date;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": {
										"value": "@pipeline().parameters.SinkSchema",
										"type": "Expression"
									},
									"SinkTable": {
										"value": "@pipeline().parameters.SinkTable",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 15,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"additionalColumns": [
												{
													"name": "date",
													"value": {
														"value": "@item().date",
														"type": "Expression"
													}
												},
												{
													"name": "date_p",
													"value": {
														"value": "@item().date_p",
														"type": "Expression"
													}
												},
												{
													"name": "date_p7",
													"value": {
														"value": "@item().date_p7",
														"type": "Expression"
													}
												},
												{
													"name": "market",
													"value": {
														"value": "@item().market",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['PUM_NM']"
													},
													"sink": {
														"name": "pum_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['G_NAME']"
													},
													"sink": {
														"name": "g_name",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['U_NAME']"
													},
													"sink": {
														"name": "u_name",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['MI_P']"
													},
													"sink": {
														"name": "mi_p",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['MA_P']"
													},
													"sink": {
														"name": "ma_p",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['AV_P']"
													},
													"sink": {
														"name": "av_p",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['PAV_P']"
													},
													"sink": {
														"name": "pav_p",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['FLUC']"
													},
													"sink": {
														"name": "fluc",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['D_MARK']"
													},
													"sink": {
														"name": "d_mark",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['J_7']"
													},
													"sink": {
														"name": "j_7",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['J_7_MARK']"
													},
													"sink": {
														"name": "j_7_mark",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['date']"
													},
													"sink": {
														"name": "date",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['date_p']"
													},
													"sink": {
														"name": "date_p",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['date_p7']"
													},
													"sink": {
														"name": "date_p7",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['market']"
													},
													"sink": {
														"name": "market",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['resultData']",
											"mapComplexValuesToString": false
										}
									},
									"inputs": [
										{
											"referenceName": "DTS_API_GARAK",
											"type": "DatasetReference",
											"parameters": {
												"url": {
													"value": "@concat('/publicdata/dataJsonOpen.do?id=3606&passwd=days2023!&dataid=data38&pagesize=1000&pageidx=1&portal.templet=false&market=',item().market,'&s_date=',item().date,'&s_date_p=',item().date_p,'&s_date_p7=',item().date_p7)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DTS_POSTGRESQL_SNK_P02",
											"type": "DatasetReference",
											"parameters": {
												"SinkSchema": {
													"value": "@pipeline().parameters.SinkSchema",
													"type": "Expression"
												},
												"SinkTable": {
													"value": "@pipeline().parameters.SinkTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SinkSchema": {
						"type": "string",
						"defaultValue": "cd_ods"
					},
					"SinkTable": {
						"type": "string",
						"defaultValue": "tb_garak_pricebyitemgrade_intermediary"
					}
				},
				"variables": {
					"date": {
						"type": "String"
					},
					"url": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Industry/외부/서울특별시_농수산식품공사"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-16T07:55:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_API_INDUSTRY_GARAK_PRICEBYITEMGRADE_WHOLESALEMARKET')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "(신)유통정보 - 품목별등급별가격(도매시장법인거래)",
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": " (select to_char( now(),'YYYYMMDD') as date\n,to_char(now() - INTERVAL '1 day','YYYYMMDD') as date_p\n,to_char(now() - INTERVAL '7 day','YYYYMMDD') as date_p7\n,'1' as p_pos_gubun\n,'2' as s_pum_nm\nunion\nselect \nto_char( now(),'YYYYMMDD') as date\n,to_char(now() - INTERVAL '1 day','YYYYMMDD') as date_p\n,to_char(now() - INTERVAL '7 day','YYYYMMDD') as date_p7\n,'3' as p_pos_gubun\n,'2' as s_pum_nm\nunion\nselect to_char( now(),'YYYYMMDD') as date\n,to_char(now() - INTERVAL '1 day','YYYYMMDD') as date_p\n,to_char(now() - INTERVAL '7 day','YYYYMMDD') as date_p7\n,'1' as p_pos_gubun\n,'3' as s_pum_nm\nunion\nselect \nto_char( now(),'YYYYMMDD') as date\n,to_char(now() - INTERVAL '1 day','YYYYMMDD') as date_p\n,to_char(now() - INTERVAL '7 day','YYYYMMDD') as date_p7\n,'3' as p_pos_gubun\n,'3' as s_pum_nm\n)\norder by date;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": {
										"value": "@pipeline().parameters.SinkSchema",
										"type": "Expression"
									},
									"SinkTable": {
										"value": "@pipeline().parameters.SinkTable",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 15,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"additionalColumns": [
												{
													"name": "date",
													"value": {
														"value": "@item().date",
														"type": "Expression"
													}
												},
												{
													"name": "date_p",
													"value": {
														"value": "@item().date_p",
														"type": "Expression"
													}
												},
												{
													"name": "date_p7",
													"value": {
														"value": "@item().date_p7",
														"type": "Expression"
													}
												},
												{
													"name": "p_pos_gubun",
													"value": {
														"value": "@item().p_pos_gubun",
														"type": "Expression"
													}
												},
												{
													"name": "s_pum_nm",
													"value": {
														"value": "@item().s_pum_nm",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['PUM_NM']"
													},
													"sink": {
														"name": "pum_nm",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['G_NAME']"
													},
													"sink": {
														"name": "g_name",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['U_NAME']"
													},
													"sink": {
														"name": "u_name",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['MI_P']"
													},
													"sink": {
														"name": "mi_p",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['MA_P']"
													},
													"sink": {
														"name": "ma_p",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['AV_P']"
													},
													"sink": {
														"name": "av_p",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['FLUC']"
													},
													"sink": {
														"name": "fluc",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['D_MARK_P']"
													},
													"sink": {
														"name": "d_mark_p",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['D_MARK_R']"
													},
													"sink": {
														"name": "d_mark_r",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['J_SAME_P']"
													},
													"sink": {
														"name": "j_same_p",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['J_SAME_R']"
													},
													"sink": {
														"name": "j_same_r",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['J_SAME_MARK_P']"
													},
													"sink": {
														"name": "j_same_mark_p",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "[['J_SAME_MARK_R']"
													},
													"sink": {
														"name": "j_same_mark_r",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['date']"
													},
													"sink": {
														"name": "date",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['date_p']"
													},
													"sink": {
														"name": "date_p",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['date_p7']"
													},
													"sink": {
														"name": "date_p7",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['p_pos_gubun']"
													},
													"sink": {
														"name": "p_pos_gubun",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['s_pum_nm']"
													},
													"sink": {
														"name": "s_pum_nm",
														"type": "String"
													}
												}
											],
											"collectionReference": "$['resultData']",
											"mapComplexValuesToString": false
										}
									},
									"inputs": [
										{
											"referenceName": "DTS_API_GARAK",
											"type": "DatasetReference",
											"parameters": {
												"url": {
													"value": "@concat('/publicdata/dataJsonOpen.do?id=3603&passwd=days2023!&dataid=data36&pagesize=1000&pageidx=1&portal.templet=false&s_date=',item().date,'&s_date_p=',item().date_p,'&s_date_p7=',item().date_p7,'&p_pos_gubun=',item().p_pos_gubun,'&s_pum_nm=',item().s_pum_nm)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DTS_POSTGRESQL_SNK_P02",
											"type": "DatasetReference",
											"parameters": {
												"SinkSchema": {
													"value": "@pipeline().parameters.SinkSchema",
													"type": "Expression"
												},
												"SinkTable": {
													"value": "@pipeline().parameters.SinkTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Lookup1_copy1_copy1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "select cd_ods.fn_garak_final_update();",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": {
										"value": "@pipeline().parameters.SinkSchema",
										"type": "Expression"
									},
									"SinkTable": {
										"value": "@pipeline().parameters.SinkTable",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SinkSchema": {
						"type": "string",
						"defaultValue": "cd_ods"
					},
					"SinkTable": {
						"type": "string",
						"defaultValue": "tb_garak_pricebyitemgrade_wholesalemarket"
					}
				},
				"variables": {
					"date": {
						"type": "String"
					},
					"url": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Industry/외부/서울특별시_농수산식품공사"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-16T07:55:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_API_INDUSTRY_APIS_KIMCHI_MATERIAL_WEATHER_SHORT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "수요기관정보조회",
				"activities": [
					{
						"name": "set y",
						"description": "관측지점코",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "y",
							"value": {
								"value": "@pipeline().parameters.y",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set x",
						"description": "종료일",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "x",
							"value": {
								"value": "@pipeline().parameters.x",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set base_date",
						"description": "시작일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "base_date",
							"value": {
								"value": "@pipeline().parameters.base_date",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1_copy1_copy1_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "set y",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set x",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set base_date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set item_code",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set obsr_spot_code",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"additionalColumns": [
									{
										"name": "item_code",
										"value": {
											"value": "@variables('item_code')",
											"type": "Expression"
										}
									},
									{
										"name": "obsr_spot_code",
										"value": {
											"value": "@variables('obsr_spot_code')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['category']"
										},
										"sink": {
											"name": "category",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['fcstDate']"
										},
										"sink": {
											"name": "fcstdate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['fcstTime']"
										},
										"sink": {
											"name": "fcsttime",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['fcstValue']"
										},
										"sink": {
											"name": "fcstvalue",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['item_code']"
										},
										"sink": {
											"name": "item_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['obsr_spot_code']"
										},
										"sink": {
											"name": "obsr_spot_code",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['response']['body']['items']['item']",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "DTS_API_APIS_XML",
								"type": "DatasetReference",
								"parameters": {
									"url": {
										"value": "@concat('/1360000/VilageFcstInfoService_2.0/getVilageFcst?serviceKey=rj5HeIJYh3E2HRvmEw3P3%2BeVDZoZj074w7IIt%2BpcAaujPSI9CTx0U88XSd6C9eWwkBMUncCaG4w%2FtYRT898jcw%3D%3D&pageNo=1&numOfRows=1000&dataType=XML&base_date=',variables('base_date'),'&base_time=0800&nx=',variables('x'),'&ny=',variables('y'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": {
										"value": "@pipeline().parameters.SinkSchema",
										"type": "Expression"
									},
									"SinkTable": {
										"value": "@pipeline().parameters.SinkTable",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "set obsr_spot_code",
						"description": "시작일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "obsr_spot_code",
							"value": {
								"value": "@pipeline().parameters.obsr_spot_code",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set item_code",
						"description": "시작일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "item_code",
							"value": {
								"value": "@pipeline().parameters.item_code",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SinkSchema": {
						"type": "string",
						"defaultValue": "cd_ods"
					},
					"SinkTable": {
						"type": "string",
						"defaultValue": "tb_kimchi_material_weather_t"
					},
					"y": {
						"type": "string"
					},
					"x": {
						"type": "string"
					},
					"base_date": {
						"type": "string"
					},
					"obsr_spot_code": {
						"type": "string"
					},
					"item_code": {
						"type": "string"
					}
				},
				"variables": {
					"date": {
						"type": "String"
					},
					"url": {
						"type": "String"
					},
					"y": {
						"type": "String"
					},
					"base_date": {
						"type": "String"
					},
					"x": {
						"type": "String"
					},
					"obsr_spot_code": {
						"type": "String"
					},
					"item_code": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Industry/외부/국립농업과학원"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-16T07:55:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_API_INDUSTRY_APIS_KIMCHI_MATERIAL_WEATHER_LONG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "수요기관정보조회",
				"activities": [
					{
						"name": "set regId",
						"description": "종료일",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "regId",
							"value": {
								"value": "@pipeline().parameters.regId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set tmFc",
						"description": "시작일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tmFc",
							"value": {
								"value": "@pipeline().parameters.tmFc",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1_copy1_copy1_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "set regId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set tmFc",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set item_code",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set obsr_spot_code",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"additionalColumns": [
									{
										"name": "item_code",
										"value": {
											"value": "@variables('item_code')",
											"type": "Expression"
										}
									},
									{
										"name": "obsr_spot_code",
										"value": {
											"value": "@variables('obsr_spot_code')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['response']['body']['items']['item']['taMin3']"
										},
										"sink": {
											"name": "tamin3",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['response']['body']['items']['item']['taMax3']"
										},
										"sink": {
											"name": "tamax3",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['response']['body']['items']['item']['taMin4']"
										},
										"sink": {
											"name": "tamin4",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['response']['body']['items']['item']['taMax4']"
										},
										"sink": {
											"name": "tamax4",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['response']['body']['items']['item']['taMin5']"
										},
										"sink": {
											"name": "tamin5",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['response']['body']['items']['item']['taMax5']"
										},
										"sink": {
											"name": "tamax5",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['response']['body']['items']['item']['taMin6']"
										},
										"sink": {
											"name": "tamin6",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['response']['body']['items']['item']['taMax6']"
										},
										"sink": {
											"name": "tamax6",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['response']['body']['items']['item']['taMin7']"
										},
										"sink": {
											"name": "tamin7",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['response']['body']['items']['item']['taMax7']"
										},
										"sink": {
											"name": "tamax7",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['item_code']"
										},
										"sink": {
											"name": "item_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['obsr_spot_code']"
										},
										"sink": {
											"name": "obsr_spot_code",
											"type": "String"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "DTS_API_APIS_XML",
								"type": "DatasetReference",
								"parameters": {
									"url": {
										"value": "@concat('/1360000/MidFcstInfoService/getMidTa?serviceKey=rj5HeIJYh3E2HRvmEw3P3%2BeVDZoZj074w7IIt%2BpcAaujPSI9CTx0U88XSd6C9eWwkBMUncCaG4w%2FtYRT898jcw%3D%3D&pageNo=1&numOfRows=100&dataType=XML&tmFc=',variables('tmFc'),'&base_time=0800&regId=',variables('regId'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference",
								"parameters": {
									"SinkSchema": {
										"value": "@pipeline().parameters.SinkSchema",
										"type": "Expression"
									},
									"SinkTable": {
										"value": "@pipeline().parameters.SinkTable",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "set obsr_spot_code",
						"description": "시작일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "obsr_spot_code",
							"value": {
								"value": "@pipeline().parameters.obsr_spot_code",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set item_code",
						"description": "시작일자",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "item_code",
							"value": {
								"value": "@pipeline().parameters.item_code",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SinkSchema": {
						"type": "string",
						"defaultValue": "cd_ods"
					},
					"SinkTable": {
						"type": "string",
						"defaultValue": "tb_kimchi_material_weather_long_t"
					},
					"regId": {
						"type": "string"
					},
					"tmFc": {
						"type": "string"
					},
					"obsr_spot_code": {
						"type": "string"
					},
					"item_code": {
						"type": "string"
					}
				},
				"variables": {
					"date": {
						"type": "String"
					},
					"url": {
						"type": "String"
					},
					"tmFc": {
						"type": "String"
					},
					"regId": {
						"type": "String"
					},
					"obsr_spot_code": {
						"type": "String"
					},
					"item_code": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Industry/외부/국립농업과학원"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-16T07:55:39Z"
			},
			"dependsOn": []
		}
	]
}