{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory 이름",
			"defaultValue": "CDI-Hub-ADF-p01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_KODATA_PG_26')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Industry/외부/한국평가데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_KODATA_26",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "DTS_ADLS_KODATA_26에서 데이터 가져오기"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          kedcd = Column_1,",
						"          std_dt = Column_2,",
						"          txpl_ccd = Column_3,",
						"          txpl_seq = Column_4,",
						"          tx_am_base_stdt = Column_5,",
						"          tx_am_base_eddt = Column_6,",
						"          txpl_nm = Column_7,",
						"          tel_no = Column_8,",
						"          bzno = Column_9,",
						"          txpl_kedcd = Column_10,",
						"          do_ccd = Column_11,",
						"          tx_fcd = Column_12,",
						"          pd_nm = Column_13,",
						"          pd_cd = Column_14,",
						"          tx_am = Column_15,",
						"          tx_rt = Column_16,",
						"          tx_prd = Column_17,",
						"          csh_stl_rt = Column_18,",
						"          cr_stl_rt = Column_19,",
						"          cr_stl_dcn = Column_20,",
						"          cnd_etc = Column_21,",
						"          rmk = Column_22",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(txpl_nm_n = replace(replace(txpl_nm, '\\'', ''),'\"',''),",
						"          pd_nm_n = replace(replace(pd_nm, '\\'', ''),'\"',''),",
						"          cnd_etc_n = replace(replace(cnd_etc, '\\'', ''),'\"',''),",
						"          rmk_n = replace(replace(rmk, '\\'', ''),'\"','')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          kedcd,",
						"          std_dt,",
						"          txpl_ccd,",
						"          txpl_seq,",
						"          tx_am_base_stdt,",
						"          tx_am_base_eddt,",
						"          txpl_nm = txpl_nm_n,",
						"          tel_no,",
						"          bzno,",
						"          txpl_kedcd,",
						"          do_ccd,",
						"          tx_fcd,",
						"          pd_nm = pd_nm_n,",
						"          pd_cd,",
						"          tx_am,",
						"          tx_rt,",
						"          tx_prd,",
						"          csh_stl_rt,",
						"          cr_stl_rt,",
						"          cr_stl_dcn,",
						"          cnd_etc = cnd_etc_n,",
						"          rmk = rmk_n",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_KODATA_PG_41')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Industry/외부/한국평가데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_KODATA_41",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "DTS_ADLS_KODATA_D8에서 데이터 가져오기"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          kedcd = Column_1,",
						"          reg_dt = Column_2,",
						"          evl_dt = Column_3,",
						"          sttl_base_dd = Column_4,",
						"          grd_cls = Column_5,",
						"          cr_grd = Column_6,",
						"          modl_evl_dt = Column_7,",
						"          ivg_mtd_cls = Column_8,",
						"          grd_sv_st_dd = Column_9,",
						"          grd_sv_eddt = Column_10",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          kedcd,",
						"          reg_dt,",
						"          evl_dt,",
						"          sttl_base_dd,",
						"          grd_cls,",
						"          cr_grd,",
						"          modl_evl_dt,",
						"          ivg_mtd_cls,",
						"          grd_sv_st_dd,",
						"          grd_sv_eddt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_KODATA_PG_63')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Industry/외부/한국평가데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_KODATA_63",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "DTS_ADLS_KODATA_63에서 데이터 가져오기"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          kedcd = Column_1,",
						"          acct_dt = Column_2,",
						"          acct_ccd = Column_3,",
						"          acc_cd_full = Column_4,",
						"          fs_info_cd = Column_5,",
						"          fs_bzc_cd = Column_6,",
						"          fs_ccd = Column_7,",
						"          acc_cd = Column_8,",
						"          val = Column_9,",
						"          err_cd = Column_10,",
						"          std_dt = Column_11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          kedcd,",
						"          acct_dt,",
						"          acct_ccd,",
						"          acc_cd_full,",
						"          fs_info_cd,",
						"          fs_bzc_cd,",
						"          fs_ccd,",
						"          acc_cd,",
						"          val,",
						"          err_cd,",
						"          std_dt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_KODATA_PG_87')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Industry/외부/한국평가데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_KODATA_87",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          bzno = Column_1,",
						"          lt_iq_dt = Column_2,",
						"          base_dt = Column_3,",
						"          lqdt_cls = Column_4,",
						"          lqdt_dt = Column_5,",
						"          filler = Column_6",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          bzno,",
						"          lt_iq_dt,",
						"          base_dt,",
						"          lqdt_cls,",
						"          lqdt_dt,",
						"          filler",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_KODATA_PG_D1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Industry/외부/한국평가데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_KODATA_D1",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "DTS_ADLS_KODATA_D1에서 데이터 가져오기"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string,",
						"          Column_29 as string,",
						"          Column_30 as string,",
						"          Column_31 as string,",
						"          Column_32 as string,",
						"          Column_33 as string,",
						"          Column_34 as string,",
						"          Column_35 as string,",
						"          Column_36 as string,",
						"          Column_37 as string,",
						"          Column_38 as string,",
						"          Column_39 as string,",
						"          Column_40 as string,",
						"          Column_41 as string,",
						"          Column_42 as string,",
						"          Column_43 as string,",
						"          Column_44 as string,",
						"          Column_45 as string,",
						"          Column_46 as string,",
						"          Column_47 as string,",
						"          Column_48 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          kedcd = Column_1,",
						"          enp_nm = Column_2,",
						"          enp_nm_trd = Column_3,",
						"          enp_nm_eng = Column_4,",
						"          enp_typ = Column_5,",
						"          enp_sze = Column_6,",
						"          grdt_pln_dt = Column_7,",
						"          enp_fcd = Column_8,",
						"          estb_fcd = Column_9,",
						"          enp_scd = Column_10,",
						"          enp_scd_chg_dt = Column_11,",
						"          pubi_fcd = Column_12,",
						"          venp_yn = Column_13,",
						"          enp_form_fr = Column_14,",
						"          bzc_cd = Column_15,",
						"          fs_bzc_cd = Column_16,",
						"          grp_cd = Column_17,",
						"          grp_nm = Column_18,",
						"          cono_pid = Column_19,",
						"          estb_dt = Column_20,",
						"          ipo_cd = Column_21,",
						"          trdbz_rpt_no = Column_22,",
						"          list_dt = Column_23,",
						"          dlist_dt = Column_24,",
						"          mtx_bnk_cd = Column_25,",
						"          mtx_bnk_nm = Column_26,",
						"          ovd_tx_bnk_cd = Column_27,",
						"          ovd_tx_bnk_nm = Column_28,",
						"          acct_eddt = Column_29,",
						"          hpage_url = Column_30,",
						"          email = Column_31,",
						"          std_dt = Column_32,",
						"          bzno = Column_33,",
						"          loc_zip = Column_34,",
						"          loc_addra = Column_35,",
						"          loc_addrb = Column_36,",
						"          tel_no = Column_37,",
						"          fax_no = Column_38,",
						"          laborer_sum = Column_39,",
						"          pd_nm = Column_40,",
						"          ksic9_bzc_cd = Column_41,",
						"          rel_kedcd = Column_42,",
						"          rel_estb_dt = Column_43,",
						"          loc_rdnm_zip = Column_44,",
						"          loc_rdnm_addra = Column_45,",
						"          loc_rdnm_addrb = Column_46,",
						"          loc_rdnm_addrb_conf_yn = Column_47,",
						"          loc_addrb_conf_yn = Column_48",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(enp_nm_n = replace(replace(enp_nm, '\\'', ''),'\"',''),",
						"          enp_nm_trd_n = replace(replace(enp_nm_trd, '\\'', ''),'\"',''),",
						"          enp_nm_eng_n = replace(replace(enp_nm_eng, '\\'', ''),'\"',''),",
						"          mtx_bnk_nm_n = replace(replace(mtx_bnk_nm, '\\'', ''),'\"',''),",
						"          ovd_tx_bnk_nm_n = replace(replace(ovd_tx_bnk_nm, '\\'', ''),'\"',''),",
						"          pd_nm_n = replace(replace(pd_nm, '\\'', ''),'\"','')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          kedcd,",
						"          enp_nm = enp_nm_n,",
						"          enp_nm_trd = enp_nm_trd_n,",
						"          enp_nm_eng = enp_nm_eng_n,",
						"          enp_typ,",
						"          enp_sze,",
						"          grdt_pln_dt,",
						"          enp_fcd,",
						"          estb_fcd,",
						"          enp_scd,",
						"          enp_scd_chg_dt,",
						"          pubi_fcd,",
						"          venp_yn,",
						"          enp_form_fr,",
						"          bzc_cd,",
						"          fs_bzc_cd,",
						"          grp_cd,",
						"          grp_nm,",
						"          cono_pid,",
						"          estb_dt,",
						"          ipo_cd,",
						"          trdbz_rpt_no,",
						"          list_dt,",
						"          dlist_dt,",
						"          mtx_bnk_cd,",
						"          mtx_bnk_nm = mtx_bnk_nm_n,",
						"          ovd_tx_bnk_cd,",
						"          ovd_tx_bnk_nm = ovd_tx_bnk_nm_n,",
						"          acct_eddt,",
						"          hpage_url,",
						"          email,",
						"          std_dt,",
						"          bzno,",
						"          loc_zip,",
						"          loc_addra,",
						"          loc_addrb,",
						"          tel_no,",
						"          fax_no,",
						"          laborer_sum,",
						"          pd_nm = pd_nm_n,",
						"          ksic9_bzc_cd,",
						"          rel_kedcd,",
						"          rel_estb_dt,",
						"          loc_rdnm_zip,",
						"          loc_rdnm_addra,",
						"          loc_rdnm_addrb,",
						"          loc_rdnm_addrb_conf_yn,",
						"          loc_addrb_conf_yn",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_KODATA_PG_D4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Industry/외부/한국평가데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_KODATA_D4",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "DTS_ADLS_KODATA_D1에서 데이터 가져오기"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string,",
						"          Column_29 as string,",
						"          Column_30 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          kedcd = Column_1,",
						"          std_dt = Column_2,",
						"          renp_seq = Column_3,",
						"          renp_nm = Column_4,",
						"          cono_pid = Column_5,",
						"          renp_kedcd = Column_6,",
						"          renp_kedcd = Column_7,",
						"          renp_zip = Column_8,",
						"          renp_addra = Column_9,",
						"          renp_addrb = Column_10,",
						"          renp_bzcd_nm = Column_11,",
						"          renp_mpd_nm = Column_12,",
						"          renp_acct_dt = Column_13,",
						"          renp_cap = Column_14,",
						"          renp_taset = Column_15,",
						"          renp_sale_am = Column_16,",
						"          renp_ct_npf = Column_17,",
						"          eqrt = Column_18,",
						"          buy_am = Column_19,",
						"          renp_buy_ript = Column_20,",
						"          sam = Column_21,",
						"          renp_sale_ript = Column_22,",
						"          pgrn_am = Column_23,",
						"          renp_bon_t_amt = Column_24,",
						"          renp_db_t_amt = Column_25,",
						"          rel_ctt = Column_26,",
						"          renp_rdnm_zip = Column_27,",
						"          renp_rdnm_addra = Column_28,",
						"          renp_rdnm_addrb = Column_29,",
						"          renp_rdnm_addrb_conf_yn = Column_30,",
						"          renp_addrb_conf_yn = Column_1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(rel_ctt_n = replace(replace(rel_ctt, '\\'', ''),'\"','')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          kedcd,",
						"          std_dt,",
						"          renp_seq,",
						"          renp_nm,",
						"          cono_pid,",
						"          renp_kedcd,",
						"          renp_zip,",
						"          renp_addra,",
						"          renp_addrb,",
						"          renp_bzcd_nm,",
						"          renp_mpd_nm,",
						"          renp_acct_dt,",
						"          renp_cap,",
						"          renp_taset,",
						"          renp_sale_am,",
						"          renp_ct_npf,",
						"          eqrt,",
						"          buy_am,",
						"          renp_buy_ript,",
						"          sam,",
						"          renp_sale_ript,",
						"          pgrn_am,",
						"          renp_bon_t_amt,",
						"          renp_db_t_amt,",
						"          rel_ctt = rel_ctt_n,",
						"          renp_rdnm_zip,",
						"          renp_rdnm_addra,",
						"          renp_rdnm_addrb,",
						"          renp_rdnm_addrb_conf_yn",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_KODATA_PG_D8')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Industry/외부/한국평가데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_KODATA_D8",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "DTS_ADLS_KODATA_D8에서 데이터 가져오기"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          kedcd = Column_1,",
						"          std_dt = Column_2,",
						"          sth_stt_seq = Column_3,",
						"          sth_ccd = Column_4,",
						"          sth_nm = Column_5,",
						"          kedcd_pcd = Column_6,",
						"          cono_pid = Column_7,",
						"          mdm_rel_cd = Column_8,",
						"          emp_rel_cd = Column_9,",
						"          own_stk_cn = Column_10,",
						"          cstk_cn = Column_11,",
						"          pstk_cn = Column_12,",
						"          eqrt = Column_13,",
						"          cstk_rt = Column_14,",
						"          pstk_rt = Column_15,",
						"          own_stk_am = Column_16,",
						"          rmk = Column_17",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(sth_nm_n = replace(replace(sth_nm, '\\'', ''),'\"',''),",
						"          rmk_n = replace(replace(rmk, '\\'', ''),'\"','')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          kedcd,",
						"          std_dt,",
						"          sth_stt_seq,",
						"          sth_ccd,",
						"          sth_nm = sth_nm_n,",
						"          kedcd_pcd,",
						"          cono_pid,",
						"          mdm_rel_cd,",
						"          emp_rel_cd,",
						"          own_stk_cn,",
						"          cstk_cn,",
						"          pstk_cn,",
						"          eqrt,",
						"          cstk_rt,",
						"          pstk_rt,",
						"          own_stk_am,",
						"          rmk = rmk_n",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_MKTLINK_PG')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "매출(주문)/외부/유통사MS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_MKTLINK",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {카테고리} as string,",
						"          {월별} as string,",
						"          {분기} as string,",
						"          {년도} as string,",
						"          {채널} as string,",
						"          {지역} as string,",
						"          {영업조직} as string,",
						"          ONOFF as string,",
						"          ITEM_DESC as string,",
						"          BARCODE as string,",
						"          MANUFACTURER as string,",
						"          BRAND as string,",
						"          SUB_BRAND as string,",
						"          ATTR01 as string,",
						"          ATTR02 as string,",
						"          ATTR03 as string,",
						"          ATTR04 as string,",
						"          ATTR05 as string,",
						"          ATTR06 as string,",
						"          ATTR07 as string,",
						"          {판매금액} as string,",
						"          {판매물량} as string,",
						"          {판매수량} as string,",
						"          ND as string,",
						"          WD as string,",
						"          {신제품 출시 년월} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['매출(주문)/외부/유통사MS정보/마켓링크/유통사 MS 데이터_마켓링크_20????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          category = {카테고리},",
						"          month = {월별},",
						"          qter = {분기},",
						"          year = {년도},",
						"          ch = {채널},",
						"          region = {지역},",
						"          salesorg = {영업조직},",
						"          onoff = ONOFF,",
						"          item_desc = ITEM_DESC,",
						"          barcode = BARCODE,",
						"          manufacturer = MANUFACTURER,",
						"          brand = BRAND,",
						"          sub_brand = SUB_BRAND,",
						"          attr01 = ATTR01,",
						"          attr02 = ATTR02,",
						"          attr03 = ATTR03,",
						"          attr04 = ATTR04,",
						"          attr05 = ATTR05,",
						"          sales_amt = {판매금액},",
						"          sales_qtm = {판매물량},",
						"          sales_qty = {판매수량},",
						"          nd = ND,",
						"          wd = WD,",
						"          newproduct_date = {신제품 출시 년월},",
						"          attr06 = ATTR06,",
						"          attr07 = ATTR07",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(yyyymm = replace(substring(toString(currentDate()),1,7),'-',''),",
						"          crt_date = currentDate(),",
						"          newproduct_yyyymm = replace(replace(newproduct_date,'년 ',''),'월','')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          category,",
						"          month,",
						"          qter,",
						"          year,",
						"          ch,",
						"          region,",
						"          salesorg,",
						"          onoff,",
						"          item_desc,",
						"          barcode,",
						"          manufacturer,",
						"          brand,",
						"          sub_brand,",
						"          attr01,",
						"          attr02,",
						"          attr03,",
						"          attr04,",
						"          attr05,",
						"          sales_amt,",
						"          sales_qtm,",
						"          sales_qty,",
						"          nd,",
						"          wd,",
						"          newproduct_date,",
						"          yyyymm,",
						"          crt_date,",
						"          newproduct_yyyymm,",
						"          attr06,",
						"          attr07",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_MKTLINK_PG_NEW')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "매출(주문)/외부/유통사MS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_MKTLINK",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {카테고리} as string,",
						"          {월별} as string,",
						"          {분기} as string,",
						"          {년도} as string,",
						"          {채널} as string,",
						"          {지역} as string,",
						"          {영업조직} as string,",
						"          ONOFF as string,",
						"          ITEM_DESC as string,",
						"          BARCODE as string,",
						"          MANUFACTURER as string,",
						"          BRAND as string,",
						"          SUB_BRAND as string,",
						"          ATTR01 as string,",
						"          ATTR02 as string,",
						"          ATTR03 as string,",
						"          ATTR04 as string,",
						"          ATTR05 as string,",
						"          {판매금액} as string,",
						"          {판매물량} as string,",
						"          {판매수량} as string,",
						"          ND as string,",
						"          WD as string,",
						"          {신제품 출시 년월} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['매출(주문)/외부/유통사MS정보/마켓링크/유통사 MS 데이터_마켓링크_20????_신규카테고리.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          category = {카테고리},",
						"          month = {월별},",
						"          qter = {분기},",
						"          year = {년도},",
						"          ch = {채널},",
						"          region = {지역},",
						"          salesorg = {영업조직},",
						"          onoff = ONOFF,",
						"          item_desc = ITEM_DESC,",
						"          barcode = BARCODE,",
						"          manufacturer = MANUFACTURER,",
						"          brand = BRAND,",
						"          sub_brand = SUB_BRAND,",
						"          attr01 = ATTR01,",
						"          attr02 = ATTR02,",
						"          attr03 = ATTR03,",
						"          attr04 = ATTR04,",
						"          attr05 = ATTR05,",
						"          sales_amt = {판매금액},",
						"          sales_qtm = {판매물량},",
						"          sales_qty = {판매수량},",
						"          nd = ND,",
						"          wd = WD,",
						"          newproduct_date = {신제품 출시 년월}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(yyyymm = replace(substring(toString(currentDate()),1,7),'-',''),",
						"          crt_date = currentDate(),",
						"          newproduct_yyyymm = replace(replace(newproduct_date,'년 ',''),'월','')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          category,",
						"          month,",
						"          qter,",
						"          year,",
						"          ch,",
						"          region,",
						"          salesorg,",
						"          onoff,",
						"          item_desc,",
						"          barcode,",
						"          manufacturer,",
						"          brand,",
						"          sub_brand,",
						"          attr01,",
						"          attr02,",
						"          attr03,",
						"          attr04,",
						"          attr05,",
						"          sales_amt,",
						"          sales_qtm,",
						"          sales_qty,",
						"          nd,",
						"          wd,",
						"          newproduct_date,",
						"          yyyymm,",
						"          crt_date,",
						"          newproduct_yyyymm",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ONLINE_MEMBER_MST')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객분석"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "BOMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "JWMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D2",
								"type": "DatasetReference"
							},
							"name": "BOdelMemberD2"
						},
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "BOdelMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D2",
								"type": "DatasetReference"
							},
							"name": "JWdelMemberD2"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "JWdelMemberD1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "PGSNK1"
						},
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "PKSNK2"
						}
					],
					"transformations": [
						{
							"name": "SelectBestonPk1"
						},
						{
							"name": "SelectJwesPk1"
						},
						{
							"name": "CountBestonPk1"
						},
						{
							"name": "CountJwesPk1"
						},
						{
							"name": "TotalMemberCountBO"
						},
						{
							"name": "TotalMemberCountJW"
						},
						{
							"name": "select1"
						},
						{
							"name": "select4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "BOdeleteCount"
						},
						{
							"name": "BOdelete"
						},
						{
							"name": "join1"
						},
						{
							"name": "BOsnk"
						},
						{
							"name": "select5"
						},
						{
							"name": "select6"
						},
						{
							"name": "exists2"
						},
						{
							"name": "JWdeleteCount"
						},
						{
							"name": "JWdelete"
						},
						{
							"name": "join2"
						},
						{
							"name": "JWsnk"
						}
					],
					"scriptLines": [
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOMemberD1",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWMemberD1",
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOdelMemberD2",
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOdelMemberD1",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWdelMemberD2",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWdelMemberD1",
						"BOMemberD1 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBestonPk1",
						"JWMemberD1 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectJwesPk1",
						"SelectBestonPk1 aggregate(totalMember = count(memno)) ~> CountBestonPk1",
						"SelectJwesPk1 aggregate(pk = count(pk)) ~> CountJwesPk1",
						"CountBestonPk1 derive(mall_gbn = \"BO\",",
						"          cnt_date = currentDate()) ~> TotalMemberCountBO",
						"CountJwesPk1 derive(mall_gbn = \"JW\",",
						"          cntdate = currentDate()) ~> TotalMemberCountJW",
						"BOdelMemberD2 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"BOdelMemberD1 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select1, select4 exists(select1@memno == select4@memno,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 aggregate(delMember = count(memno)) ~> BOdeleteCount",
						"BOdeleteCount derive(cnt_date = currentDate()) ~> BOdelete",
						"TotalMemberCountBO, BOdelete join(TotalMemberCountBO@cnt_date == BOdelete@cnt_date,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          totalmember_cnt = totalMember,",
						"          mall_gbn,",
						"          cntdate = TotalMemberCountBO@cnt_date,",
						"          delmember_cnt = delMember",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> BOsnk",
						"JWdelMemberD2 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"JWdelMemberD1 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select5, select6 exists(select5@pk == select6@pk,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists2",
						"exists2 aggregate(pk = count(pk)) ~> JWdeleteCount",
						"JWdeleteCount derive(cntdate = currentDate()) ~> JWdelete",
						"TotalMemberCountJW, JWdelete join(TotalMemberCountJW@cntdate == JWdelete@cntdate,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          totalmember_cnt = CountJwesPk1@pk,",
						"          mall_gbn,",
						"          cntdate = TotalMemberCountJW@cntdate,",
						"          delmember_cnt = JWdeleteCount@pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> JWsnk",
						"BOsnk sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          totalmember_cnt,",
						"          mall_gbn,",
						"          cntdate,",
						"          delmember_cnt",
						"     )) ~> PGSNK1",
						"JWsnk sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          totalmember_cnt,",
						"          mall_gbn,",
						"          cntdate,",
						"          delmember_cnt",
						"     )) ~> PKSNK2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ONLINE_MEMBER_MST_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객분석"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "BOMemberD1",
							"description": "Import data from DTS_BO_MEMBER_MST_D1"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "JWMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D2",
								"type": "DatasetReference"
							},
							"name": "BOdelMemberD2"
						},
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "BOdelMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D2",
								"type": "DatasetReference"
							},
							"name": "JWdelMemberD2"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "JWdelMemberD1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "PGSNK1"
						},
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "PKSNK2"
						}
					],
					"transformations": [
						{
							"name": "SelectBestonPk1"
						},
						{
							"name": "SelectJwesPk1"
						},
						{
							"name": "CountBestonPk1"
						},
						{
							"name": "CountJwesPk1"
						},
						{
							"name": "TotalMemberCountBO"
						},
						{
							"name": "TotalMemberCountJW"
						},
						{
							"name": "select1"
						},
						{
							"name": "select4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "BOdeleteCount"
						},
						{
							"name": "BOdelete"
						},
						{
							"name": "join1"
						},
						{
							"name": "BOsnk"
						},
						{
							"name": "select5"
						},
						{
							"name": "select6"
						},
						{
							"name": "exists2"
						},
						{
							"name": "JWdeleteCount"
						},
						{
							"name": "JWdelete"
						},
						{
							"name": "join2"
						},
						{
							"name": "JWsnk"
						}
					],
					"scriptLines": [
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOMemberD1",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWMemberD1",
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOdelMemberD2",
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOdelMemberD1",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWdelMemberD2",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWdelMemberD1",
						"BOMemberD1 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBestonPk1",
						"JWMemberD1 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectJwesPk1",
						"SelectBestonPk1 aggregate(totalMember = count(memno)) ~> CountBestonPk1",
						"SelectJwesPk1 aggregate(pk = count(pk)) ~> CountJwesPk1",
						"CountBestonPk1 derive(mall_gbn = \"BO\",",
						"          cnt_date = currentDate()) ~> TotalMemberCountBO",
						"CountJwesPk1 derive(mall_gbn = \"JW\",",
						"          cntdate = currentDate()) ~> TotalMemberCountJW",
						"BOdelMemberD2 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"BOdelMemberD1 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select1, select4 exists(select1@memno == select4@memno,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 aggregate(delMember = count(memno)) ~> BOdeleteCount",
						"BOdeleteCount derive(cnt_date = currentDate()) ~> BOdelete",
						"TotalMemberCountBO, BOdelete join(TotalMemberCountBO@cnt_date == BOdelete@cnt_date,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          totalmember_cnt = totalMember,",
						"          mall_gbn,",
						"          cntdate = TotalMemberCountBO@cnt_date,",
						"          delmember_cnt = delMember",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> BOsnk",
						"JWdelMemberD2 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"JWdelMemberD1 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select5, select6 exists(select5@pk == select6@pk,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists2",
						"exists2 aggregate(pk = count(pk)) ~> JWdeleteCount",
						"JWdeleteCount derive(cntdate = currentDate()) ~> JWdelete",
						"TotalMemberCountJW, JWdelete join(TotalMemberCountJW@cntdate == JWdelete@cntdate,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          totalmember_cnt = CountJwesPk1@pk,",
						"          mall_gbn,",
						"          cntdate = TotalMemberCountJW@cntdate,",
						"          delmember_cnt = JWdeleteCount@pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> JWsnk",
						"BOsnk sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          totalmember_cnt,",
						"          mall_gbn,",
						"          cntdate,",
						"          delmember_cnt",
						"     )) ~> PGSNK1",
						"JWsnk sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          totalmember_cnt,",
						"          mall_gbn,",
						"          cntdate,",
						"          delmember_cnt",
						"     )) ~> PKSNK2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_REMOVE_RT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "리트윗된 컬럼 제",
				"folder": {
					"name": "고객/외부/TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_SRC_DF_P02",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_CSV_DF_SNK",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     AdlsDirectory as string,",
						"     FileName as string",
						"}",
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          content as string,",
						"          retweeted_id as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string,",
						"          retweet_count as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:[(concat($AdlsDirectory, \"/\", $FileName))]) ~> source1",
						"source1 filter(!startsWith(content, \"RT @\")) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat($AdlsDirectory, \"/\", $FileName, \"_copy\"))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_REPLACE_TEXT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_SRC_DF_P02",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_CSV_DF_SNK",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     AdlsDirectory as string,",
						"     FileName as string",
						"}",
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          title as string,",
						"          content as string,",
						"          comments as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:[(concat($AdlsDirectory, \"/\", $FileName))]) ~> source1",
						"source1 derive(content = replace(content, \"'\", \"\\\\qt\\\\\")) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat($AdlsDirectory, \"/\", $FileName))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_RSN_SEARCHING_KEYWORD_INC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "트렌드/외부"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_PG_SEARCH_KEYWORD_INC",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "LKS_ADLS_P02",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          skd_id as string,",
						"          site as string,",
						"          site_id as string,",
						"          board_id as string,",
						"          skd_keyword as string,",
						"          skd_search_cnt as string,",
						"          skd_date as string,",
						"          skd_crawl_time as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          skd_keyword,",
						"          skd_search_cnt,",
						"          skd_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_RSN_SEARCHING_KEYWORD_M')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "트렌드/외부"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_PG_SEARCH_KEYWORD_M",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "LKS_ADLS_P02",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          skd_id as string,",
						"          site as string,",
						"          site_id as string,",
						"          board_id as string,",
						"          skd_keyword as string,",
						"          skd_search_cnt as string,",
						"          skd_date as string,",
						"          skd_crawl_time as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['/트렌드/외부/검색어추이/D_RSN_네이버검색어추이_일일검색량정보_SEARCH_KEYWORD_DATA_20??????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          skd_keyword,",
						"          skd_search_cnt,",
						"          skd_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SNK_PG_BO_CONTENTS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/내부"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_SNK_PG_BO_CONTENTS",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SNO as string,",
						"          CHANNEL as string,",
						"          CONTENTS as string,",
						"          GOODSNO as string,",
						"          ORDERGOODSNO as string,",
						"          REGDT as string,",
						"          MODDT as string,",
						"          GOODSCD as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          id = SNO,",
						"          contents = CONTENTS,",
						"          write_time = REGDT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(channel_nm = '베스트온_STORE',",
						"          source_nm = 'REVIEW',",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SNK_PG_JWRS_CONTENTS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/내부"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_JWES_CONTENTS",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SEQ_NO as string,",
						"          PK as string,",
						"          HEADLINE as string,",
						"          CONTENTS as string,",
						"          P_CODE as string,",
						"          P_RATING as string,",
						"          ORDERNUMBER as string,",
						"          CRTDT as string,",
						"          MODDT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          id = SEQ_NO,",
						"          title = HEADLINE,",
						"          contents = CONTENTS,",
						"          write_time = CRTDT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(channel_nm = '정원e샵_STORE',",
						"          source_nm = 'REVIEW',",
						"          if_dt = currentTimestamp(),",
						"          id = iifNull(id,''),",
						"          title = replace(replace(replace(title, '//CM//',','),'//LF//','\\n'),'\\0',''),",
						"          contents = substring(replace(replace(replace(contents, '//CM//',','),'//LF//','\\n'),'\\0',''),1,1000),",
						"          write_time = substring(write_time, 1,10)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          title,",
						"          contents,",
						"          write_time,",
						"          channel_nm,",
						"          source_nm,",
						"          if_dt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_SNK_P01",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_SNK_P01",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          content as string,",
						"          retweeted_id as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     multiLineRow: true,",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 alterRow(deleteIf(equals(left(content,4),'RT @'))) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1_TEST_LYJI')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_SNK_P01",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_SNK_P01",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          content as string,",
						"          retweeted_id as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     multiLineRow: true,",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 alterRow(deleteIf(equals(left(content,4),'RT @'))) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     quoteAll: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/API_IND_OUT_APIS_M')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "관세청 수출입 정보 및 환율 정",
				"activities": [
					{
						"name": "PIP_API_INDUSTRY_APIS_NitemtradeList",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PIP_API_INDUSTRY_APIS_NitemtradeList",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PIP_API_INDUSTRY_APIS_RETRIEVE_TRIF_FXRTINFO",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PIP_API_INDUSTRY_APIS_NitemtradeList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PIP_API_INDUSTRY_APIS_RETRIEVE_TRIF_FXRTINFO",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "실행/Monthly"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-19T01:56:26Z"
			},
			"dependsOn": []
		}
	]
}