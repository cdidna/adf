{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory 이름",
			"defaultValue": "CDI-Hub-ADF-p01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_ADLS_PG_CUSTOMER_OPINION_YOUTUBE_FULL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/소셜고객의견데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_SNK_CUSTOMER_OPINION_YOUTUBE_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          title as string,",
						"          content as string,",
						"          comments as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/소셜고객의견데이터/유튜브/Temp/소셜고객의견데이터_유튜브_202?????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          write_time = date,",
						"          channel_nm = project_id,",
						"          id,",
						"          url,",
						"          title,",
						"          contents = content",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(write_time = toDate(write_time,'yyyyMMdd'),",
						"          id = iifNull(id,''),",
						"          contents = substring(replace(replace(contents, '//CM//',','),'//LF//','\\n'),1,1000),",
						"          title = replace(replace(title, '//CM//',','),'//LF//','\\n'),",
						"          source_nm = \"SOCIAL\",",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          write_time,",
						"          channel_nm,",
						"          id,",
						"          url,",
						"          title,",
						"          contents,",
						"          source_nm,",
						"          if_dt",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ADLS_PG_CUSTOMER_OPINION_YOUTUBE_INC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/소셜고객의견데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_SNK_CUSTOMER_OPINION_YOUTUBE_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          title as string,",
						"          content as string,",
						"          comments as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          write_time = date,",
						"          channel_nm = project_id,",
						"          id,",
						"          url,",
						"          title,",
						"          contents = content",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(write_time = toDate(write_time,'yyyyMMdd'),",
						"          id = iifNull(id,''),",
						"          contents = substring(replace(replace(contents, '//CM//',','),'//LF//','\\n'),1,1000),",
						"          title = replace(replace(title, '//CM//',','),'//LF//','\\n'),",
						"          source_nm = \"SOCIAL\",",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          write_time,",
						"          channel_nm,",
						"          id,",
						"          url,",
						"          title,",
						"          contents,",
						"          source_nm,",
						"          if_dt",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ADLS_PG_CUSTOMER_OPINION_YOUTUBE_INC_TEST')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/소셜고객의견데이터"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_SNK_CUSTOMER_OPINION_YOUTUBE_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          title as string,",
						"          content as string,",
						"          comments as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/소셜고객의견데이터/유튜브/Temp/소셜고객의견데이터_유튜브_202?????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          write_time = date,",
						"          channel_nm = project_id,",
						"          id,",
						"          url,",
						"          title,",
						"          contents = content",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(write_time = toDate(write_time,'yyyyMMdd'),",
						"          id = iifNull(id,''),",
						"          contents = substring(replace(replace(contents, '//CM//',','),'//LF//','\\n'),1,1000),",
						"          title = replace(replace(title, '//CM//',','),'//LF//','\\n'),",
						"          source_nm = \"SOCIAL\",",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          write_time,",
						"          channel_nm,",
						"          id,",
						"          url,",
						"          title,",
						"          contents,",
						"          source_nm,",
						"          if_dt",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ADLS_PG_STORE_REVIEW_INC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/RSN"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_RSN_STORE_REVIEW_INC",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          srd_id as string,",
						"          sd_reviewid as string,",
						"          site as string,",
						"          site_id as string,",
						"          srd_title as string,",
						"          srd_content as string,",
						"          srd_writer as string,",
						"          srd_writetime as string,",
						"          srd_rate as string,",
						"          srd_crawl_time as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          id = srd_id,",
						"          sd_review_id = sd_reviewid,",
						"          channel_nm = site,",
						"          title = srd_title,",
						"          contents = srd_content,",
						"          write_time = srd_writetime,",
						"          srd_rate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(contents = substring(replace(replace(contents, '//CM//',','),'//LF//','\\n'),1,1000),",
						"          write_time = toDate(substring(write_time,1,10)),",
						"          title = replace(replace(title, '//CM//',','),'//LF//','\\n'),",
						"          source_nm = \"REVIEW\",",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          sd_review_id,",
						"          channel_nm,",
						"          title,",
						"          contents,",
						"          write_time,",
						"          srd_rate,",
						"          source_nm,",
						"          if_dt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ADLS_PG_STORE_REVIEW_INC_sungun')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/RSN"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_RSN_STORE_REVIEW_INC_sungun",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          srd_id as string,",
						"          sd_reviewid as string,",
						"          site as string,",
						"          site_id as string,",
						"          srd_title as string,",
						"          srd_content as string,",
						"          srd_writer as string,",
						"          srd_writetime as string,",
						"          srd_rate as string,",
						"          srd_crawl_time as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/온라인몰정보/RSN_온라인몰_리뷰정보(중복제거)/D_RSN_온라인몰_리뷰정보(중복제거)_STORE_REVIEW_DATA_202?????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          id = srd_id,",
						"          sd_review_id = sd_reviewid,",
						"          channel_nm = site,",
						"          title = srd_title,",
						"          contents = srd_content,",
						"          write_time = srd_writetime,",
						"          srd_rate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(contents = substring(replace(replace(replace(replace(replace(contents, '//CM//',','),'//LF//','\\n'),'\\\",', '\",'), '\\\"', '＂'), '\\0',''),1,1000),",
						"          write_time = toDate(substring(write_time,1,10)),",
						"          title = replace(replace(replace(replace(replace(title, '//CM//',','),'//LF//','\\n'),'\\\",', '\",'), '\\\"', '＂'), '\\0',''),",
						"          source_nm = \"REVIEW\",",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          sd_review_id,",
						"          channel_nm,",
						"          title,",
						"          contents,",
						"          write_time,",
						"          srd_rate,",
						"          source_nm,",
						"          if_dt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ADLS_PG_STORE_REVIEW_M')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/RSN"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_RSN_STORE_REVIEW_M",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          srd_id as string,",
						"          sd_reviewid as string,",
						"          site as string,",
						"          site_id as string,",
						"          srd_title as string,",
						"          srd_content as string,",
						"          srd_writer as string,",
						"          srd_writetime as string,",
						"          srd_rate as string,",
						"          srd_crawl_time as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/온라인몰정보/RSN_온라인몰_리뷰정보(중복제거)/D_RSN_온라인몰_리뷰정보(중복제거)_STORE_REVIEW_DATA_20??????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          id = srd_id,",
						"          sd_review_id = sd_reviewid,",
						"          channel_nm = site,",
						"          title = srd_title,",
						"          contents = srd_content,",
						"          write_time = srd_writetime,",
						"          srd_rate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(contents = substring(replace(replace(replace(contents, '//CM//',','),'//LF//','\\n'),'\\u0000',''),1,1000),",
						"          write_time = toDate(substring(write_time,1,10)),",
						"          title = replace(replace(replace(title, '//CM//',','),'//LF//','\\n'),'\\u0000',''),",
						"          source_nm = \"REVIEW\",",
						"          if_dt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          sd_review_id,",
						"          channel_nm,",
						"          title,",
						"          contents,",
						"          write_time,",
						"          srd_rate,",
						"          source_nm,",
						"          if_dt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ASSOCIATION_BLOG_FULL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/연관어"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_PG_ASSOCIATION_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          projectId as string,",
						"          date as string,",
						"          queryName as string,",
						"          associationKeyword as string,",
						"          frequency as string,",
						"          score as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/연관어/블로그/연관어_블로그_20??????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          projectid = projectId,",
						"          date,",
						"          queryname = queryName,",
						"          associationkeyword = associationKeyword,",
						"          frequency,",
						"          score",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(if_dt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          projectid,",
						"          date,",
						"          queryname,",
						"          associationkeyword,",
						"          frequency,",
						"          score,",
						"          if_dt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ASSOCIATION_COMM_FULL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/연관어"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_PG_ASSOCIATION_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          projectId as string,",
						"          date as string,",
						"          queryName as string,",
						"          associationKeyword as string,",
						"          frequency as string,",
						"          score as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/연관어/커뮤니티/연관어_커뮤니티_20??????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          projectid = projectId,",
						"          date,",
						"          queryname = queryName,",
						"          associationkeyword = associationKeyword,",
						"          frequency,",
						"          score",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(if_dt = currentDate(),",
						"          projectid = iifNull(projectid,'null'),",
						"          date = iifNull(date,'null'),",
						"          queryname = iifNull(queryname,'null'),",
						"          associationkeyword = iifNull(associationkeyword,'null'),",
						"          frequency = iifNull(frequency,'null'),",
						"          score = iifNull(score,'null')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          projectid,",
						"          date,",
						"          queryname,",
						"          associationkeyword,",
						"          frequency,",
						"          score,",
						"          if_dt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ASSOCIATION_INSTA_FULL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/연관어"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_PG_ASSOCIATION_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          projectId as string,",
						"          date as string,",
						"          queryName as string,",
						"          associationKeyword as string,",
						"          frequency as string,",
						"          score as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/연관어/인스타그램/연관어_인스타그램_20??????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          projectid = projectId,",
						"          date,",
						"          queryname = queryName,",
						"          associationkeyword = associationKeyword,",
						"          frequency,",
						"          score",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(if_dt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          projectid,",
						"          date,",
						"          queryname,",
						"          associationkeyword,",
						"          frequency,",
						"          score,",
						"          if_dt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ASSOCIATION_NEWS_FULL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/연관어"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_PG_ASSOCIATION_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          projectId as string,",
						"          date as string,",
						"          queryName as string,",
						"          associationKeyword as string,",
						"          frequency as string,",
						"          score as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/연관어/뉴스/연관어_뉴스_20??????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          projectid = projectId,",
						"          date,",
						"          queryname = queryName,",
						"          associationkeyword = associationKeyword,",
						"          frequency,",
						"          score",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(if_dt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          projectid,",
						"          date,",
						"          queryname,",
						"          associationkeyword,",
						"          frequency,",
						"          score,",
						"          if_dt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ASSOCIATION_TWITTER_FULL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/연관어"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_PG_ASSOCIATION_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          projectId as string,",
						"          date as string,",
						"          queryName as string,",
						"          associationKeyword as string,",
						"          frequency as string,",
						"          score as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/연관어/트위터/연관어_트위터_20??????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          projectid = projectId,",
						"          date,",
						"          queryname = queryName,",
						"          associationkeyword = associationKeyword,",
						"          frequency,",
						"          score",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(if_dt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          projectid,",
						"          date,",
						"          queryname,",
						"          associationkeyword,",
						"          frequency,",
						"          score,",
						"          if_dt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ASSOCIATION_YOUTUBE_FULL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/연관어"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_PG_ASSOCIATION_FULL",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          projectId as string,",
						"          date as string,",
						"          queryName as string,",
						"          associationKeyword as string,",
						"          frequency as string,",
						"          score as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['고객/외부/연관어/유튜브/연관어_유튜브_20??????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          projectid = projectId,",
						"          date,",
						"          queryname = queryName,",
						"          associationkeyword = associationKeyword,",
						"          frequency,",
						"          score",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(if_dt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          projectid,",
						"          date,",
						"          queryname,",
						"          associationkeyword,",
						"          frequency,",
						"          score,",
						"          if_dt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_MKTLINK_PG')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "매출(주문)/외부/유통사MS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_MKTLINK",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {카테고리} as string,",
						"          {월별} as string,",
						"          {분기} as string,",
						"          {년도} as string,",
						"          {채널} as string,",
						"          {지역} as string,",
						"          {영업조직} as string,",
						"          ONOFF as string,",
						"          ITEM_DESC as string,",
						"          BARCODE as string,",
						"          MANUFACTURER as string,",
						"          BRAND as string,",
						"          SUB_BRAND as string,",
						"          ATTR01 as string,",
						"          ATTR02 as string,",
						"          ATTR03 as string,",
						"          ATTR04 as string,",
						"          ATTR05 as string,",
						"          {판매금액} as string,",
						"          {판매물량} as string,",
						"          {판매수량} as string,",
						"          ND as string,",
						"          WD as string,",
						"          {신제품 출시 년월} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['매출(주문)/외부/유통사MS정보/마켓링크/유통사 MS 데이터_마켓링크_20????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          category = {카테고리},",
						"          month = {월별},",
						"          qter = {분기},",
						"          year = {년도},",
						"          ch = {채널},",
						"          region = {지역},",
						"          salesorg = {영업조직},",
						"          onoff = ONOFF,",
						"          item_desc = ITEM_DESC,",
						"          barcode = BARCODE,",
						"          manufacturer = MANUFACTURER,",
						"          brand = BRAND,",
						"          sub_brand = SUB_BRAND,",
						"          attr01 = ATTR01,",
						"          attr02 = ATTR02,",
						"          attr03 = ATTR03,",
						"          attr04 = ATTR04,",
						"          attr05 = ATTR05,",
						"          sales_amt = {판매금액},",
						"          sales_qtm = {판매물량},",
						"          sales_qty = {판매수량},",
						"          nd = ND,",
						"          wd = WD,",
						"          newproduct_date = {신제품 출시 년월}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(yyyymm = replace(substring(toString(currentDate()),1,7),'-',''),",
						"          crt_date = currentDate(),",
						"          newproduct_yyyymm = replace(replace(newproduct_date,'년 ',''),'월','')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          category,",
						"          month,",
						"          qter,",
						"          year,",
						"          ch,",
						"          region,",
						"          salesorg,",
						"          onoff,",
						"          item_desc,",
						"          barcode,",
						"          manufacturer,",
						"          brand,",
						"          sub_brand,",
						"          attr01,",
						"          attr02,",
						"          attr03,",
						"          attr04,",
						"          attr05,",
						"          sales_amt,",
						"          sales_qtm,",
						"          sales_qty,",
						"          nd,",
						"          wd,",
						"          newproduct_date,",
						"          yyyymm,",
						"          crt_date,",
						"          newproduct_yyyymm",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_MKTLINK_PG_NEW')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "매출(주문)/외부/유통사MS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_MKTLINK",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {카테고리} as string,",
						"          {월별} as string,",
						"          {분기} as string,",
						"          {년도} as string,",
						"          {채널} as string,",
						"          {지역} as string,",
						"          {영업조직} as string,",
						"          ONOFF as string,",
						"          ITEM_DESC as string,",
						"          BARCODE as string,",
						"          MANUFACTURER as string,",
						"          BRAND as string,",
						"          SUB_BRAND as string,",
						"          ATTR01 as string,",
						"          ATTR02 as string,",
						"          ATTR03 as string,",
						"          ATTR04 as string,",
						"          ATTR05 as string,",
						"          {판매금액} as string,",
						"          {판매물량} as string,",
						"          {판매수량} as string,",
						"          ND as string,",
						"          WD as string,",
						"          {신제품 출시 년월} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['매출(주문)/외부/유통사MS정보/마켓링크/유통사 MS 데이터_마켓링크_20????_신규카테고리.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          category = {카테고리},",
						"          month = {월별},",
						"          qter = {분기},",
						"          year = {년도},",
						"          ch = {채널},",
						"          region = {지역},",
						"          salesorg = {영업조직},",
						"          onoff = ONOFF,",
						"          item_desc = ITEM_DESC,",
						"          barcode = BARCODE,",
						"          manufacturer = MANUFACTURER,",
						"          brand = BRAND,",
						"          sub_brand = SUB_BRAND,",
						"          attr01 = ATTR01,",
						"          attr02 = ATTR02,",
						"          attr03 = ATTR03,",
						"          attr04 = ATTR04,",
						"          attr05 = ATTR05,",
						"          sales_amt = {판매금액},",
						"          sales_qtm = {판매물량},",
						"          sales_qty = {판매수량},",
						"          nd = ND,",
						"          wd = WD,",
						"          newproduct_date = {신제품 출시 년월}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(yyyymm = replace(substring(toString(currentDate()),1,7),'-',''),",
						"          crt_date = currentDate(),",
						"          newproduct_yyyymm = replace(replace(newproduct_date,'년 ',''),'월','')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          category,",
						"          month,",
						"          qter,",
						"          year,",
						"          ch,",
						"          region,",
						"          salesorg,",
						"          onoff,",
						"          item_desc,",
						"          barcode,",
						"          manufacturer,",
						"          brand,",
						"          sub_brand,",
						"          attr01,",
						"          attr02,",
						"          attr03,",
						"          attr04,",
						"          attr05,",
						"          sales_amt,",
						"          sales_qtm,",
						"          sales_qty,",
						"          nd,",
						"          wd,",
						"          newproduct_date,",
						"          yyyymm,",
						"          crt_date,",
						"          newproduct_yyyymm",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ONLINE_MEMBER_MST')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객분석"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "BOMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "JWMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D2",
								"type": "DatasetReference"
							},
							"name": "BOdelMemberD2"
						},
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "BOdelMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D2",
								"type": "DatasetReference"
							},
							"name": "JWdelMemberD2"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "JWdelMemberD1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "PGSNK1"
						},
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "PKSNK2"
						}
					],
					"transformations": [
						{
							"name": "SelectBestonPk1"
						},
						{
							"name": "SelectJwesPk1"
						},
						{
							"name": "CountBestonPk1"
						},
						{
							"name": "CountJwesPk1"
						},
						{
							"name": "TotalMemberCountBO"
						},
						{
							"name": "TotalMemberCountJW"
						},
						{
							"name": "select1"
						},
						{
							"name": "select4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "BOdeleteCount"
						},
						{
							"name": "BOdelete"
						},
						{
							"name": "join1"
						},
						{
							"name": "BOsnk"
						},
						{
							"name": "select5"
						},
						{
							"name": "select6"
						},
						{
							"name": "exists2"
						},
						{
							"name": "JWdeleteCount"
						},
						{
							"name": "JWdelete"
						},
						{
							"name": "join2"
						},
						{
							"name": "JWsnk"
						}
					],
					"scriptLines": [
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOMemberD1",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWMemberD1",
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOdelMemberD2",
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOdelMemberD1",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWdelMemberD2",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWdelMemberD1",
						"BOMemberD1 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBestonPk1",
						"JWMemberD1 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectJwesPk1",
						"SelectBestonPk1 aggregate(totalMember = count(memno)) ~> CountBestonPk1",
						"SelectJwesPk1 aggregate(pk = count(pk)) ~> CountJwesPk1",
						"CountBestonPk1 derive(mall_gbn = \"BO\",",
						"          cnt_date = currentDate()) ~> TotalMemberCountBO",
						"CountJwesPk1 derive(mall_gbn = \"JW\",",
						"          cntdate = currentDate()) ~> TotalMemberCountJW",
						"BOdelMemberD2 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"BOdelMemberD1 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select1, select4 exists(select1@memno == select4@memno,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 aggregate(delMember = count(memno)) ~> BOdeleteCount",
						"BOdeleteCount derive(cnt_date = currentDate()) ~> BOdelete",
						"TotalMemberCountBO, BOdelete join(TotalMemberCountBO@cnt_date == BOdelete@cnt_date,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          totalmember_cnt = totalMember,",
						"          mall_gbn,",
						"          cntdate = TotalMemberCountBO@cnt_date,",
						"          delmember_cnt = delMember",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> BOsnk",
						"JWdelMemberD2 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"JWdelMemberD1 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select5, select6 exists(select5@pk == select6@pk,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists2",
						"exists2 aggregate(pk = count(pk)) ~> JWdeleteCount",
						"JWdeleteCount derive(cntdate = currentDate()) ~> JWdelete",
						"TotalMemberCountJW, JWdelete join(TotalMemberCountJW@cntdate == JWdelete@cntdate,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          totalmember_cnt = CountJwesPk1@pk,",
						"          mall_gbn,",
						"          cntdate = TotalMemberCountJW@cntdate,",
						"          delmember_cnt = JWdeleteCount@pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> JWsnk",
						"BOsnk sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          totalmember_cnt,",
						"          mall_gbn,",
						"          cntdate,",
						"          delmember_cnt",
						"     )) ~> PGSNK1",
						"JWsnk sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          totalmember_cnt,",
						"          mall_gbn,",
						"          cntdate,",
						"          delmember_cnt",
						"     )) ~> PKSNK2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_ONLINE_MEMBER_MST_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객분석"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "BOMemberD1",
							"description": "Import data from DTS_BO_MEMBER_MST_D1"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "JWMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D2",
								"type": "DatasetReference"
							},
							"name": "BOdelMemberD2"
						},
						{
							"dataset": {
								"referenceName": "DTS_BO_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "BOdelMemberD1"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D2",
								"type": "DatasetReference"
							},
							"name": "JWdelMemberD2"
						},
						{
							"dataset": {
								"referenceName": "DTS_JW_MEMBER_MST_D1",
								"type": "DatasetReference"
							},
							"name": "JWdelMemberD1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "PGSNK1"
						},
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "PKSNK2"
						}
					],
					"transformations": [
						{
							"name": "SelectBestonPk1"
						},
						{
							"name": "SelectJwesPk1"
						},
						{
							"name": "CountBestonPk1"
						},
						{
							"name": "CountJwesPk1"
						},
						{
							"name": "TotalMemberCountBO"
						},
						{
							"name": "TotalMemberCountJW"
						},
						{
							"name": "select1"
						},
						{
							"name": "select4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "BOdeleteCount"
						},
						{
							"name": "BOdelete"
						},
						{
							"name": "join1"
						},
						{
							"name": "BOsnk"
						},
						{
							"name": "select5"
						},
						{
							"name": "select6"
						},
						{
							"name": "exists2"
						},
						{
							"name": "JWdeleteCount"
						},
						{
							"name": "JWdelete"
						},
						{
							"name": "join2"
						},
						{
							"name": "JWsnk"
						}
					],
					"scriptLines": [
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOMemberD1",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWMemberD1",
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOdelMemberD2",
						"source(output(",
						"          memno as string,",
						"          approvaldt as string,",
						"          memberfl as string,",
						"          sexfl as string,",
						"          birthdt as string,",
						"          zipcode as string,",
						"          maillingfl as string,",
						"          smsfl as string,",
						"          entrypath as string,",
						"          logincnt as string,",
						"          lastlogindt as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BOdelMemberD1",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWdelMemberD2",
						"source(output(",
						"          pk as string,",
						"          reg_dt as string,",
						"          member_gbn as string,",
						"          sex as string,",
						"          birth as string,",
						"          zipcode as string,",
						"          company as string,",
						"          mktfl as string,",
						"          emailfl as string,",
						"          phonefl as string,",
						"          mailfl as string,",
						"          smsfl as string,",
						"          appushfl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JWdelMemberD1",
						"BOMemberD1 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBestonPk1",
						"JWMemberD1 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectJwesPk1",
						"SelectBestonPk1 aggregate(totalMember = count(memno)) ~> CountBestonPk1",
						"SelectJwesPk1 aggregate(pk = count(pk)) ~> CountJwesPk1",
						"CountBestonPk1 derive(mall_gbn = \"BO\",",
						"          cnt_date = currentDate()) ~> TotalMemberCountBO",
						"CountJwesPk1 derive(mall_gbn = \"JW\",",
						"          cntdate = currentDate()) ~> TotalMemberCountJW",
						"BOdelMemberD2 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"BOdelMemberD1 select(mapColumn(",
						"          memno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select1, select4 exists(select1@memno == select4@memno,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 aggregate(delMember = count(memno)) ~> BOdeleteCount",
						"BOdeleteCount derive(cnt_date = currentDate()) ~> BOdelete",
						"TotalMemberCountBO, BOdelete join(TotalMemberCountBO@cnt_date == BOdelete@cnt_date,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          totalmember_cnt = totalMember,",
						"          mall_gbn,",
						"          cntdate = TotalMemberCountBO@cnt_date,",
						"          delmember_cnt = delMember",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> BOsnk",
						"JWdelMemberD2 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"JWdelMemberD1 select(mapColumn(",
						"          pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select5, select6 exists(select5@pk == select6@pk,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists2",
						"exists2 aggregate(pk = count(pk)) ~> JWdeleteCount",
						"JWdeleteCount derive(cntdate = currentDate()) ~> JWdelete",
						"TotalMemberCountJW, JWdelete join(TotalMemberCountJW@cntdate == JWdelete@cntdate,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          totalmember_cnt = CountJwesPk1@pk,",
						"          mall_gbn,",
						"          cntdate = TotalMemberCountJW@cntdate,",
						"          delmember_cnt = JWdeleteCount@pk",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> JWsnk",
						"BOsnk sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          totalmember_cnt,",
						"          mall_gbn,",
						"          cntdate,",
						"          delmember_cnt",
						"     )) ~> PGSNK1",
						"JWsnk sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          totalmember_cnt,",
						"          mall_gbn,",
						"          cntdate,",
						"          delmember_cnt",
						"     )) ~> PKSNK2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_REMOVE_RT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "리트윗된 컬럼 제",
				"folder": {
					"name": "고객/외부/TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_SRC_DF_P02",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_CSV_DF_SNK",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     AdlsDirectory as string,",
						"     FileName as string",
						"}",
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          content as string,",
						"          retweeted_id as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string,",
						"          retweet_count as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:[(concat($AdlsDirectory, \"/\", $FileName))]) ~> source1",
						"source1 filter(!startsWith(content, \"RT @\")) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat($AdlsDirectory, \"/\", $FileName, \"_copy\"))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_REPLACE_TEXT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "고객/외부/TEST"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_SRC_DF_P02",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_ADLS_CSV_DF_SNK",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     AdlsDirectory as string,",
						"     FileName as string",
						"}",
						"source(output(",
						"          date as string,",
						"          topic_ids as string,",
						"          topics as string,",
						"          project_id as string,",
						"          datetime as string,",
						"          crawl_datetime as string,",
						"          id as string,",
						"          url as string,",
						"          title as string,",
						"          content as string,",
						"          comments as string,",
						"          site_name as string,",
						"          author_id as string,",
						"          author_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:[(concat($AdlsDirectory, \"/\", $FileName))]) ~> source1",
						"source1 derive(content = replace(content, \"'\", \"\\\\qt\\\\\")) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat($AdlsDirectory, \"/\", $FileName))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_RSN_SEARCHING_KEYWORD_INC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "트렌드/외부"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_PG_SEARCH_KEYWORD_INC",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "LKS_ADLS_P02",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          skd_id as string,",
						"          site as string,",
						"          site_id as string,",
						"          board_id as string,",
						"          skd_keyword as string,",
						"          skd_search_cnt as string,",
						"          skd_date as string,",
						"          skd_crawl_time as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          skd_keyword,",
						"          skd_search_cnt,",
						"          skd_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_RSN_SEARCHING_KEYWORD_M')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "트렌드/외부"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADLS_PG_SEARCH_KEYWORD_M",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DTS_POSTGRESQL_SNK_P02",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "LKS_ADLS_P02",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          skd_id as string,",
						"          site as string,",
						"          site_id as string,",
						"          board_id as string,",
						"          skd_keyword as string,",
						"          skd_search_cnt as string,",
						"          skd_date as string,",
						"          skd_crawl_time as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['/트렌드/외부/검색어추이/D_RSN_네이버검색어추이_일일검색량정보_SEARCH_KEYWORD_DATA_20??????.csv']) ~> source1",
						"source1 select(mapColumn(",
						"          skd_keyword,",
						"          skd_search_cnt,",
						"          skd_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		}
	]
}