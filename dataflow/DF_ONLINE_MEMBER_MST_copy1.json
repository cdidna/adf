{
	"name": "DF_ONLINE_MEMBER_MST_copy1",
	"properties": {
		"folder": {
			"name": "고객분석"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DTS_BO_MEMBER_MST_D1",
						"type": "DatasetReference"
					},
					"name": "BOMemberD1",
					"description": "Import data from DTS_BO_MEM_bER_MST_D1"
				},
				{
					"dataset": {
						"referenceName": "DTS_JW_MEMBER_MST_D1",
						"type": "DatasetReference"
					},
					"name": "JWMemberD1"
				},
				{
					"dataset": {
						"referenceName": "DTS_BO_MEMBER_MST_D2",
						"type": "DatasetReference"
					},
					"name": "BOdelMemberD2"
				},
				{
					"dataset": {
						"referenceName": "DTS_BO_MEMBER_MST_D1",
						"type": "DatasetReference"
					},
					"name": "BOdelMemberD1"
				},
				{
					"dataset": {
						"referenceName": "DTS_JW_MEMBER_MST_D2",
						"type": "DatasetReference"
					},
					"name": "JWdelMemberD2"
				},
				{
					"dataset": {
						"referenceName": "DTS_JW_MEMBER_MST_D1",
						"type": "DatasetReference"
					},
					"name": "JWdelMemberD1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DTS_POSTGRESQL_SNK_P02",
						"type": "DatasetReference"
					},
					"name": "PGSNK1"
				},
				{
					"dataset": {
						"referenceName": "DTS_POSTGRESQL_SNK_P02",
						"type": "DatasetReference"
					},
					"name": "PKSNK2"
				}
			],
			"transformations": [
				{
					"name": "SelectBestonPk1"
				},
				{
					"name": "SelectJwesPk1"
				},
				{
					"name": "CountBestonPk1"
				},
				{
					"name": "CountJwesPk1"
				},
				{
					"name": "TotalMemberCountBO"
				},
				{
					"name": "TotalMemberCountJW"
				},
				{
					"name": "select1"
				},
				{
					"name": "select4"
				},
				{
					"name": "exists1"
				},
				{
					"name": "BOdeleteCount"
				},
				{
					"name": "BOdelete"
				},
				{
					"name": "join1"
				},
				{
					"name": "BOsnk"
				},
				{
					"name": "select5"
				},
				{
					"name": "select6"
				},
				{
					"name": "exists2"
				},
				{
					"name": "JWdeleteCount"
				},
				{
					"name": "JWdelete"
				},
				{
					"name": "join2"
				},
				{
					"name": "JWsnk"
				}
			],
			"scriptLines": [
				"source(output(",
				"          memno as string,",
				"          approvaldt as string,",
				"          memberfl as string,",
				"          sexfl as string,",
				"          birthdt as string,",
				"          zipcode as string,",
				"          maillingfl as string,",
				"          smsfl as string,",
				"          entrypath as string,",
				"          logincnt as string,",
				"          lastlogindt as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> BOMemberD1",
				"source(output(",
				"          pk as string,",
				"          reg_dt as string,",
				"          member_gbn as string,",
				"          sex as string,",
				"          birth as string,",
				"          zipcode as string,",
				"          company as string,",
				"          mktfl as string,",
				"          emailfl as string,",
				"          phonefl as string,",
				"          mailfl as string,",
				"          smsfl as string,",
				"          appushfl as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> JWMemberD1",
				"source(output(",
				"          memno as string,",
				"          approvaldt as string,",
				"          memberfl as string,",
				"          sexfl as string,",
				"          birthdt as string,",
				"          zipcode as string,",
				"          maillingfl as string,",
				"          smsfl as string,",
				"          entrypath as string,",
				"          logincnt as string,",
				"          lastlogindt as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> BOdelMemberD2",
				"source(output(",
				"          memno as string,",
				"          approvaldt as string,",
				"          memberfl as string,",
				"          sexfl as string,",
				"          birthdt as string,",
				"          zipcode as string,",
				"          maillingfl as string,",
				"          smsfl as string,",
				"          entrypath as string,",
				"          logincnt as string,",
				"          lastlogindt as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> BOdelMemberD1",
				"source(output(",
				"          pk as string,",
				"          reg_dt as string,",
				"          member_gbn as string,",
				"          sex as string,",
				"          birth as string,",
				"          zipcode as string,",
				"          company as string,",
				"          mktfl as string,",
				"          emailfl as string,",
				"          phonefl as string,",
				"          mailfl as string,",
				"          smsfl as string,",
				"          appushfl as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> JWdelMemberD2",
				"source(output(",
				"          pk as string,",
				"          reg_dt as string,",
				"          member_gbn as string,",
				"          sex as string,",
				"          birth as string,",
				"          zipcode as string,",
				"          company as string,",
				"          mktfl as string,",
				"          emailfl as string,",
				"          phonefl as string,",
				"          mailfl as string,",
				"          smsfl as string,",
				"          appushfl as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> JWdelMemberD1",
				"BOMemberD1 select(mapColumn(",
				"          memno",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectBestonPk1",
				"JWMemberD1 select(mapColumn(",
				"          pk",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectJwesPk1",
				"SelectBestonPk1 aggregate(totalMember = count(memno)) ~> CountBestonPk1",
				"SelectJwesPk1 aggregate(pk = count(pk)) ~> CountJwesPk1",
				"CountBestonPk1 derive(mall_gbn = \"BO\",",
				"          cnt_date = currentDate()) ~> TotalMemberCountBO",
				"CountJwesPk1 derive(mall_gbn = \"JW\",",
				"          cntdate = currentDate()) ~> TotalMemberCountJW",
				"BOdelMemberD2 select(mapColumn(",
				"          memno",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"BOdelMemberD1 select(mapColumn(",
				"          memno",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select1, select4 exists(select1@memno == select4@memno,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 aggregate(delMember = count(memno)) ~> BOdeleteCount",
				"BOdeleteCount derive(cnt_date = currentDate()) ~> BOdelete",
				"TotalMemberCountBO, BOdelete join(TotalMemberCountBO@cnt_date == BOdelete@cnt_date,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          totalmember_cnt = totalMember,",
				"          mall_gbn,",
				"          cntdate = TotalMemberCountBO@cnt_date,",
				"          delmember_cnt = delMember",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> BOsnk",
				"JWdelMemberD2 select(mapColumn(",
				"          pk",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"JWdelMemberD1 select(mapColumn(",
				"          pk",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"select5, select6 exists(select5@pk == select6@pk,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists2",
				"exists2 aggregate(pk = count(pk)) ~> JWdeleteCount",
				"JWdeleteCount derive(cntdate = currentDate()) ~> JWdelete",
				"TotalMemberCountJW, JWdelete join(TotalMemberCountJW@cntdate == JWdelete@cntdate,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          totalmember_cnt = CountJwesPk1@pk,",
				"          mall_gbn,",
				"          cntdate = TotalMemberCountJW@cntdate,",
				"          delmember_cnt = JWdeleteCount@pk",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> JWsnk",
				"BOsnk sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          totalmember_cnt,",
				"          mall_gbn,",
				"          cntdate,",
				"          delmember_cnt",
				"     )) ~> PGSNK1",
				"JWsnk sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          totalmember_cnt,",
				"          mall_gbn,",
				"          cntdate,",
				"          delmember_cnt",
				"     )) ~> PKSNK2"
			]
		}
	}
}